// tab_data.h - Auto-Generated (Wed Jan 10 16:22:02 2018): Data for the 'tab' module. Include in your module source file.

// Bootstrap/Integral Function (HASH_TABLE_CREATE - opcode 0xD980): Hash table create.
#define hash_table_create_key f787e4645ae47c4d
#define hash_table_create_size f5ef0a94b1cad477
#define hash_table_create_crc bb5fc951ea698217
#define hash_table_create_data cdd934e7e27c8e91
static uint64_t hash_table_create_key = UINT64_C(0x4D05A416FEABB83E);
static uint64_t hash_table_create_size = UINT64_C(0x140);
static uint64_t hash_table_create_crc = UINT64_C(0xEDAC5B7A26E9261D);
static uint8_t hash_table_create_data[] = {
	0xBC, 0x1D, 0xCD, 0xD9, 0x00, 0xD4, 0x40, 0xCD, 0xE2, 0xBE, 0x50, 0x40, 0x2F, 0x7C, 0xEC, 0xE8, 0x55, 
	0x2D, 0x67, 0xE5, 0xEB, 0xF6, 0x71, 0x03, 0x3A, 0xB2, 0xCA, 0x09, 0xA3, 0xE1, 0xB8, 0x81, 0xC3, 
	0x80, 0xF2, 0x52, 0xEA, 0xC0, 0x23, 0x15, 0x49, 0x6A, 0x79, 0xD8, 0x93, 0x1B, 0x85, 0x32, 0x6C, 
	0x5F, 0x94, 0xA1, 0xBC, 0x13, 0xEC, 0x48, 0x15, 0x6B, 0x10, 0xCD, 0x26, 0x37, 0x55, 0x7E, 0xD8, 
	0x0C, 0xB6, 0xE3, 0x1A, 0xF4, 0x75, 0x32, 0xD4, 0x91, 0xCA, 0x3A, 0xA5, 0xEB, 0xB7, 0xC4, 0x8A, 
	0x4A, 0xDB, 0x1A, 0xA7, 0x55, 0x49, 0xE9, 0x07, 0x75, 0x8C, 0xAA, 0xB3, 0x21, 0xE7, 0x1E, 0x2D, 
	0xAB, 0x8E, 0x31, 0x76, 0x82, 0x57, 0xCD, 0x16, 0xAF, 0x54, 0x4E, 0xF7, 0xC6, 0xAF, 0xEC, 0x9E, 
	0x86, 0x1B, 0x40, 0x06, 0x2B, 0x7E, 0x65, 0xE1, 0xFE, 0xEF, 0x61, 0x1D, 0xA6, 0x09, 0x66, 0x13, 
	0x7E, 0x9E, 0x17, 0x79, 0xAC, 0x0A, 0xD7, 0x85, 0x59, 0x11, 0xD5, 0x16, 0x24, 0xA1, 0xCC, 0x47, 
	0x52, 0x56, 0x99, 0x3F, 0x60, 0x15, 0x1E, 0xAB, 0xA1, 0x23, 0xFE, 0x42, 0xBF, 0x11, 0x75, 0x67, 
	0x0E, 0x8F, 0x49, 0x68, 0x83, 0x04, 0x5A, 0x77, 0x38, 0xA3, 0x79, 0xB3, 0x2F, 0xE1, 0xFF, 0xD9, 
	0x9F, 0xB0, 0xDB, 0x30, 0x39, 0xA9, 0xC6, 0x92, 0xBE, 0xA1, 0xD6, 0x81, 0xE5, 0x66, 0x1B, 0x4E, 
	0x9B, 0xCF, 0x4B, 0x88, 0x04, 0x35, 0x8B, 0x5C, 0xAF, 0x6C, 0x39, 0x8D, 0x9B, 0x9C, 0x70, 0x67, 
	0x35, 0x56, 0x9C, 0x85, 0x78, 0x3F, 0x18, 0x3D, 0x35, 0xE2, 0x66, 0x81, 0xB9, 0xD2, 0x19, 0xEF, 
	0xBD, 0xD6, 0x76, 0x07, 0x87, 0x47, 0xCE, 0x94, 0x60, 0xFD, 0x05, 0x3A, 0x46, 0x1D, 0x45, 0x65, 
	0xF2, 0xFB, 0x59, 0x30, 0x94, 0xDE, 0xB8, 0xA6, 0x40, 0xC0, 0x2C, 0xF9, 0xEA, 0xC1, 0x90, 0x23, 
	0x43, 0xF7, 0x2F, 0xB6, 0x95, 0x01, 0xA2, 0xA8, 0x20, 0x98, 0x94, 0x3E, 0x42, 0x5B, 0xFB, 0x93, 
	0x3A, 0x65, 0x39, 0xD6, 0x5B, 0x77, 0x1E, 0xED, 0x4D, 0x04, 0x9F, 0xBF, 0x8C, 0x4C, 0xB0, 0x8D, 
	0xF0, 0x85, 0x4C, 0x12, 0xEC, 0xEE, 0x65, 0xFD, 0xF5, 0xE0, 0xA7, 0x31, 0x57, 0xC2, 0xC7, 0x53, 
	0xB4, 0x55, 0xCF, 0x0C, 0x20, 0x71, 0xED, 0xB1, 0xFB, 0xCA, 0xDE, 0x66, 0xD7, 0xF8, 0xFD };

// Bootstrap/Integral Function (HASH_TABLE_DESTROY - opcode 0xCC2A): Hash table destroy.
#define hash_table_destroy_key a6a7ecbca44fdf67
#define hash_table_destroy_size d9526dac11ca7e9c
#define hash_table_destroy_crc c9243eb5dcf1196d
#define hash_table_destroy_data d1b2c0262fb20374
static uint64_t hash_table_destroy_key = UINT64_C(0x19D4FA24ED30AEA1);
static uint64_t hash_table_destroy_size = UINT64_C(0xF8);
static uint64_t hash_table_destroy_crc = UINT64_C(0x6178F9D697AC3C6F);
static uint8_t hash_table_destroy_data[] = {
	0x7B, 0xAB, 0x2A, 0x63, 0xA3, 0xC8, 0x06, 0x53, 0x06, 0xC4, 0xD5, 0x2E, 0x67, 0xEC, 0x73, 0xA7, 0x90, 
	0x40, 0x91, 0xD2, 0xE0, 0x5E, 0x13, 0x8B, 0x18, 0x62, 0x41, 0xF6, 0xFD, 0x26, 0x5A, 0xF0, 0xBB, 
	0x75, 0xF2, 0x7A, 0x02, 0xE3, 0xF3, 0x77, 0xC6, 0x74, 0xFE, 0x00, 0x44, 0x75, 0x27, 0xE1, 0x79, 
	0x9A, 0x43, 0x70, 0x34, 0xB3, 0x94, 0xEF, 0xF1, 0x75, 0xA1, 0x74, 0xE8, 0x60, 0xC5, 0x5D, 0xD4, 
	0x0E, 0x57, 0x47, 0xAA, 0x90, 0x47, 0x34, 0x7D, 0x52, 0x69, 0xC4, 0x75, 0xD1, 0x07, 0xD0, 0xC5, 
	0xED, 0x90, 0x04, 0xCC, 0xE3, 0xF6, 0x68, 0x23, 0x06, 0x9E, 0xAC, 0xD6, 0xAB, 0x1A, 0x30, 0xE4, 
	0xAD, 0x74, 0xDF, 0x46, 0x0F, 0xF4, 0x96, 0x72, 0x07, 0x9B, 0x19, 0x35, 0xD5, 0xA3, 0x3E, 0x08, 
	0xBE, 0x11, 0x8A, 0xD0, 0xF4, 0x6F, 0xF1, 0x78, 0x58, 0xF1, 0x83, 0xD2, 0x46, 0x15, 0xF4, 0xB9, 
	0xCF, 0xF7, 0x73, 0x36, 0x8D, 0xF4, 0xEA, 0xC7, 0xDA, 0xAB, 0xD5, 0x76, 0xAF, 0xCE, 0xDC, 0x41, 
	0x67, 0x07, 0x31, 0xE3, 0xAD, 0xEB, 0xDA, 0x82, 0x64, 0xA0, 0x99, 0xB5, 0xCD, 0x3D, 0x9B, 0x99, 
	0x3E, 0x81, 0x99, 0xB3, 0x08, 0x34, 0x07, 0xE3, 0xE5, 0x82, 0x92, 0x82, 0x92, 0x1D, 0x0D, 0x2A, 
	0x67, 0x4F, 0x25, 0x5A, 0x70, 0x61, 0xC6, 0x4F, 0x94, 0x6C, 0xB9, 0x70, 0xB4, 0x06, 0x73, 0x02, 
	0x4D, 0x0F, 0x32, 0xE6, 0x2D, 0xB7, 0x21, 0x7B, 0xA4, 0x82, 0x3C, 0x6B, 0x32, 0xA3, 0x5A, 0x26, 
	0x6D, 0xD8, 0xE6, 0x44, 0x30, 0x92, 0x2C, 0x83, 0xF7, 0xBB, 0xDA, 0x9E, 0x74, 0xC1, 0xF4, 0xCF, 
	0x56, 0x30, 0xA8, 0x2F, 0xF7, 0xC6, 0xE9, 0x08, 0x18, 0xDF, 0x88, 0x63, 0x5B, 0xF1, 0x5F, 0x7C, 
	0x52, 0x63, 0x57, 0x7F, 0x89, 0xAA, 0x25 };

// Bootstrap/Integral Function (HASH_TABLE_CLEAR - opcode 0x9B8C): Hash table clear.
#define hash_table_clear_key aee6eaefeb6a9297
#define hash_table_clear_size b87eb4a35f30d19b
#define hash_table_clear_crc ae734a7ed6b0aae7
#define hash_table_clear_data e14a566d67f0c4cb
static uint64_t hash_table_clear_key = UINT64_C(0x64D664D63CC35A05);
static uint64_t hash_table_clear_size = UINT64_C(0xB1);
static uint64_t hash_table_clear_crc = UINT64_C(0x1D579688A8D768E3);
static uint8_t hash_table_clear_data[] = {
	0xBB, 0x06, 0x3E, 0x9F, 0xD6, 0xB4, 0x34, 0x66, 0xB2, 0x7D, 0x40, 0x79, 0xE8, 0xE9, 0x82, 0x28, 0xA0, 
	0x09, 0x2E, 0x5A, 0x63, 0x0F, 0x5F, 0x10, 0xEC, 0x69, 0x16, 0xE6, 0x0E, 0x77, 0xEA, 0xF5, 0x6F, 
	0xA5, 0xDC, 0xBD, 0xDC, 0xD0, 0x30, 0x4B, 0x6D, 0x3D, 0x57, 0x41, 0x98, 0xE1, 0x9C, 0xF4, 0x97, 
	0xB1, 0xF2, 0x43, 0xDE, 0x5C, 0x74, 0x51, 0x05, 0xFE, 0x93, 0x2D, 0xC0, 0xB9, 0x42, 0xD1, 0x41, 
	0x02, 0x4F, 0x9E, 0x83, 0x3E, 0x64, 0x34, 0x70, 0xDB, 0xB6, 0x03, 0xC3, 0xBA, 0xB0, 0xBD, 0x0E, 
	0xC2, 0x41, 0x36, 0x27, 0xDC, 0x5B, 0x52, 0xFF, 0xBC, 0x7B, 0xD9, 0xC5, 0x2C, 0x8F, 0xE7, 0x2D, 
	0x62, 0xCB, 0x0D, 0x04, 0xAE, 0x84, 0x46, 0x45, 0xB5, 0x29, 0x0B, 0x63, 0x61, 0x7B, 0x80, 0x80, 
	0xBE, 0x0F, 0x27, 0x73, 0x79, 0x55, 0x45, 0xF7, 0xB9, 0xE9, 0x59, 0x6A, 0x3B, 0x75, 0x94, 0xF5, 
	0xDB, 0xBE, 0xDB, 0xC9, 0x13, 0xC6, 0xB5, 0x47, 0xE7, 0x7D, 0xCB, 0xCD, 0x18, 0xE2, 0x9C, 0x42, 
	0xA9, 0xA5, 0x9B, 0x6D, 0x4F, 0x58, 0x0A, 0x23, 0x1F, 0xDE, 0x97, 0xF5, 0x0B, 0x52, 0x6C, 0xF9, 
	0x7D, 0xE9, 0xB4, 0xA7, 0x1E, 0xD4, 0xB7, 0x7A, 0x15, 0x75, 0x03, 0xF2, 0x11, 0xB3, 0xEB, 0x44
	 };

// Bootstrap/Integral Function (HASH_TABLE_FIND - opcode 0x2BF8): Hash table find.
#define hash_table_find_key cf160fa0a5ac1ea3
#define hash_table_find_size d31516280ad8d1a1
#define hash_table_find_crc bd9b8b3332943c12
#define hash_table_find_data aa7f687c108c8339
static uint64_t hash_table_find_key = UINT64_C(0xFEFB22B48855995);
static uint64_t hash_table_find_size = UINT64_C(0x149);
static uint64_t hash_table_find_crc = UINT64_C(0xA7AE0790EA893FA3);
static uint8_t hash_table_find_data[] = {
	0x2E, 0x01, 0x73, 0x13, 0x61, 0xD3, 0xA9, 0x13, 0xB3, 0xFD, 0x42, 0x86, 0x08, 0xBB, 0x55, 0x4A, 0xBA, 
	0xDD, 0xC6, 0x5E, 0xD5, 0x99, 0x7B, 0x92, 0x70, 0xD2, 0xDC, 0x37, 0x37, 0x55, 0xA8, 0xD1, 0x0A, 
	0x65, 0xA9, 0x70, 0xAC, 0xA7, 0x83, 0xB8, 0x3C, 0xDE, 0x4E, 0x3A, 0x64, 0x47, 0xD4, 0xFD, 0x47, 
	0x49, 0x91, 0xC4, 0x17, 0xAC, 0xB0, 0x40, 0xD5, 0x78, 0x0B, 0x31, 0x6B, 0xFD, 0xFD, 0x78, 0xA4, 
	0x3A, 0x19, 0x61, 0x64, 0xCC, 0xAC, 0x9F, 0xAA, 0x46, 0xFE, 0x27, 0xBC, 0x26, 0x7F, 0x28, 0x46, 
	0x9D, 0x9D, 0xC2, 0xFA, 0xEF, 0x98, 0x1D, 0x34, 0xC6, 0x95, 0x63, 0x96, 0x48, 0x05, 0xBD, 0x35, 
	0x53, 0x8C, 0x64, 0x1B, 0xBD, 0xC5, 0x5F, 0x83, 0x46, 0x99, 0x48, 0x7B, 0x27, 0xC5, 0xCE, 0xA6, 
	0x4B, 0x59, 0xDE, 0x2C, 0x4C, 0x23, 0xAC, 0x30, 0x1E, 0xC7, 0x68, 0x94, 0x41, 0x87, 0x5D, 0xB6, 
	0x59, 0x7E, 0xE3, 0x11, 0xB7, 0x36, 0x7F, 0x32, 0x4F, 0xC9, 0x18, 0xC1, 0x50, 0x22, 0x85, 0x19, 
	0xC0, 0x49, 0xF8, 0x55, 0xF4, 0x22, 0x89, 0xE7, 0x59, 0x99, 0xEC, 0xA3, 0x56, 0x6C, 0xCE, 0x02, 
	0xE0, 0x77, 0x9F, 0x5F, 0x9A, 0x8F, 0x56, 0xA4, 0x73, 0x69, 0x01, 0x7D, 0x67, 0xF5, 0x9D, 0x4E, 
	0x39, 0xC7, 0x73, 0x36, 0xC9, 0x91, 0xDD, 0x29, 0x91, 0x7B, 0x9E, 0xB1, 0xA4, 0xE3, 0x03, 0x93, 
	0xC1, 0x44, 0xAB, 0xFF, 0x8E, 0xD6, 0x41, 0xAF, 0xDA, 0xE3, 0x87, 0xD0, 0xBF, 0x5E, 0x91, 0x5B, 
	0x04, 0xFB, 0x10, 0xF8, 0xA8, 0x3A, 0xA0, 0x22, 0x16, 0x46, 0xBC, 0x05, 0x63, 0xB0, 0xE7, 0x23, 
	0x74, 0x89, 0x34, 0xBC, 0x2A, 0xAA, 0x7D, 0x51, 0x9E, 0xB9, 0x2F, 0x03, 0x74, 0x9F, 0xB3, 0xF9, 
	0x03, 0x13, 0x88, 0x50, 0x16, 0x70, 0xED, 0x68, 0xFF, 0x39, 0xB7, 0xC6, 0xC7, 0x22, 0x0C, 0x50, 
	0x7F, 0xDE, 0xD6, 0xE4, 0xE0, 0x8E, 0x5D, 0xCD, 0xFF, 0x9E, 0x66, 0xE4, 0xF9, 0x78, 0x9D, 0x9F, 
	0x55, 0xD9, 0x82, 0xA7, 0xE8, 0x09, 0x17, 0x0C, 0x70, 0xBF, 0xB4, 0xD4, 0xF4, 0xBE, 0xA0, 0x34, 
	0xD3, 0x17, 0x54, 0x00, 0x77, 0x86, 0xAE, 0x82, 0xA8, 0xD7, 0x6F, 0xA4, 0x39, 0x6C, 0x4E, 0x56, 
	0x0F, 0x9C, 0x46, 0x8A, 0x59, 0x75, 0x3B, 0x47, 0xBA, 0x22, 0xED, 0x7E, 0xCF, 0x13, 0x67, 0xBD, 
	0xF0, 0x27, 0x70, 0x7E, 0xFC, 0x3E, 0x52, 0x0B };

// Bootstrap/Integral Function (HASH_TABLE_RESIZE - opcode 0x4CE6): Hash table resize.
#define hash_table_resize_key a157f157b49a7952
#define hash_table_resize_size aa1c4efd2cb31d8e
#define hash_table_resize_crc aa10c981b3209ed1
#define hash_table_resize_data ce8bee282b758049
static uint64_t hash_table_resize_key = UINT64_C(0xEC1AEC1A58351691);
static uint64_t hash_table_resize_size = UINT64_C(0x3EA);
static uint64_t hash_table_resize_crc = UINT64_C(0x3EE3C7A003C94041);
static uint8_t hash_table_resize_data[] = {
	0x1C, 0x3E, 0x89, 0xC0, 0x1D, 0xAE, 0xE5, 0xF6, 0x02, 0x78, 0xB5, 0x33, 0x95, 0x58, 0xC0, 0xAA, 0x40, 
	0x33, 0xF6, 0xEE, 0x6A, 0xC8, 0x89, 0x20, 0xDA, 0xD1, 0x11, 0x50, 0x39, 0xDC, 0x2A, 0x3A, 0xED, 
	0xBC, 0xC8, 0x99, 0x5D, 0xC0, 0xCC, 0xD4, 0xB8, 0xAF, 0xB0, 0xAC, 0x2B, 0x74, 0x9B, 0xD1, 0x15, 
	0xBC, 0x2A, 0xC6, 0x56, 0x83, 0xD0, 0x36, 0x78, 0xE6, 0x82, 0xFE, 0x46, 0x44, 0x57, 0xF6, 0x0E, 
	0xDC, 0x04, 0xD3, 0x25, 0x23, 0x92, 0x67, 0x18, 0x79, 0x92, 0xAB, 0x52, 0x50, 0xEF, 0xD6, 0x8F, 
	0x05, 0x3C, 0x42, 0x47, 0xDD, 0x67, 0x26, 0x03, 0x98, 0x19, 0x47, 0x21, 0x66, 0xAB, 0xD6, 0x48, 
	0x98, 0x55, 0x35, 0xE9, 0xD5, 0xC0, 0x03, 0xE9, 0xEF, 0x2C, 0x45, 0x03, 0x22, 0xF4, 0x45, 0x77, 
	0x82, 0xAB, 0xBB, 0x04, 0x40, 0xF5, 0x14, 0x76, 0x5C, 0x27, 0x80, 0x69, 0x7A, 0xBC, 0x89, 0xDE, 
	0xC7, 0xF8, 0x20, 0x84, 0x73, 0xE0, 0xE7, 0xFB, 0x33, 0xA8, 0x9C, 0x12, 0x51, 0x08, 0x17, 0xBF, 
	0xD0, 0x17, 0xE3, 0xCC, 0xD7, 0x14, 0x78, 0x4E, 0x03, 0x53, 0x87, 0x70, 0x4B, 0x53, 0x10, 0xD4, 
	0x37, 0x88, 0x59, 0x06, 0x46, 0x02, 0x88, 0xF3, 0x7D, 0xFF, 0x49, 0x6D, 0x95, 0x93, 0xF4, 0xE7, 
	0xD4, 0x36, 0xE1, 0x64, 0x70, 0x9A, 0x4E, 0xAA, 0x20, 0xA1, 0x61, 0x82, 0xD0, 0x2E, 0x7E, 0xAF, 
	0x91, 0xF8, 0x20, 0x37, 0x1C, 0x93, 0x1E, 0xB5, 0x1E, 0xB8, 0x32, 0x12, 0xCF, 0x49, 0x8D, 0x18, 
	0x98, 0xB6, 0xBE, 0x70, 0x8D, 0x31, 0x46, 0xDF, 0x2E, 0x69, 0xAD, 0x46, 0xBF, 0x44, 0x3E, 0x9D, 
	0x2B, 0x0B, 0xD5, 0x02, 0x15, 0x51, 0x24, 0x46, 0xBB, 0x66, 0x39, 0xE0, 0x27, 0xF9, 0x2C, 0x61, 
	0x1C, 0x5A, 0x66, 0x14, 0x6A, 0xEB, 0xC7, 0x5B, 0x24, 0xD0, 0x4F, 0x4A, 0xA2, 0x00, 0x61, 0x41, 
	0xD9, 0x0A, 0x43, 0x8B, 0x42, 0x49, 0xE3, 0x04, 0xEA, 0x5B, 0xB9, 0xEE, 0x62, 0xF2, 0xEF, 0xD8, 
	0xDA, 0x2F, 0x8D, 0xEB, 0xFC, 0x15, 0xA0, 0xF7, 0x9C, 0x76, 0x26, 0xC4, 0x73, 0x4F, 0x92, 0xC5, 
	0x93, 0xA4, 0xA8, 0x42, 0x46, 0x3A, 0xCA, 0xC2, 0x91, 0x17, 0x01, 0x13, 0x33, 0x46, 0x6D, 0xDC, 
	0x77, 0xC5, 0x41, 0x70, 0x9B, 0xD4, 0x85, 0xDA, 0x09, 0x94, 0xCD, 0x20, 0xAE, 0xE6, 0x29, 0x48, 
	0x28, 0x76, 0xEC, 0x46, 0xFF, 0x02, 0x45, 0xBD, 0x9D, 0x35, 0xD5, 0xB1, 0x12, 0x11, 0xC3, 0x74, 
	0x8D, 0xD5, 0xBC, 0x70, 0x09, 0x98, 0x6F, 0xAE, 0xE8, 0x28, 0xE2, 0x57, 0x19, 0x28, 0xA9, 0x0F, 
	0xDA, 0xDC, 0xDD, 0x67, 0x2E, 0x81, 0x4C, 0x9D, 0xA9, 0x14, 0x1D, 0x9B, 0x96, 0x3B, 0xCA, 0x2A, 
	0xB4, 0xEF, 0xB1, 0xAA, 0xD1, 0x4D, 0xBF, 0x87, 0x9A, 0x81, 0x6E, 0xF3, 0x77, 0xC4, 0x65, 0x35, 
	0xD4, 0xF1, 0x07, 0x21, 0xC5, 0x0B, 0x6C, 0xD3, 0x10, 0x6A, 0xF8, 0x8D, 0xED, 0xC7, 0xDC, 0x64, 
	0x15, 0x53, 0x02, 0x3F, 0x38, 0x78, 0x9A, 0xA7, 0xCB, 0x0E, 0xD6, 0x01, 0xA4, 0x31, 0x7F, 0xB3, 
	0xF8, 0x4C, 0x56, 0xD9, 0x3A, 0x5D, 0x96, 0x5C, 0xE3, 0xB5, 0xD2, 0x0E, 0xBE, 0xEE, 0x17, 0x04, 
	0x46, 0xDE, 0x5A, 0x95, 0x33, 0x50, 0x05, 0xEF, 0x57, 0x30, 0x34, 0xFA, 0x3D, 0xD6, 0xB4, 0x84, 
	0xB0, 0x47, 0xF5, 0x6D, 0x08, 0xF5, 0x1D, 0x36, 0x4B, 0x01, 0x2B, 0xF5, 0x2F, 0x84, 0x56, 0xA7, 
	0xA3, 0x98, 0xAB, 0x18, 0x22, 0xE4, 0xDA, 0xCC, 0x2B, 0xA4, 0xDE, 0xA0, 0xBD, 0x38, 0xD9, 0x40, 
	0x86, 0x19, 0xBF, 0x6C, 0xE3, 0x80, 0x83, 0x82, 0x04, 0x52, 0x9C, 0x7D, 0x79, 0x77, 0xA5, 0xF0, 
	0xAF, 0x21, 0xFF, 0x00, 0xE9, 0xEE, 0x4C, 0xF1, 0x60, 0x42, 0xF4, 0x65, 0xD5, 0xC2, 0x55, 0xCC, 
	0x50, 0x2F, 0x6E, 0x7C, 0xB0, 0x01, 0xFE, 0x81, 0x1F, 0x70, 0xB9, 0x1B, 0xD3, 0x5E, 0x72, 0x24, 
	0x3E, 0xF6, 0xBD, 0x09, 0x77, 0xB7, 0x5F, 0xC5, 0x18, 0x10, 0xDE, 0xBE, 0x4F, 0x29, 0x67, 0x7E, 
	0x5D, 0x08, 0x03, 0xE5, 0xB2, 0x25, 0x83, 0x58, 0x78, 0xDA, 0x3D, 0x6C, 0x47, 0x19, 0xE6, 0x4F, 
	0x8D, 0x1A, 0xD6, 0xE6, 0xF6, 0xF0, 0xA0, 0xCD, 0xFE, 0xDC, 0xA3, 0xC8, 0xE3, 0xE0, 0xF0, 0x58, 
	0x43, 0x85, 0x2A, 0x73, 0x6F, 0x2F, 0x8B, 0x69, 0x7E, 0xAE, 0x0B, 0x1E, 0x95, 0x11, 0xCF, 0xEB, 
	0x54, 0x4F, 0x22, 0xEC, 0xA8, 0x28, 0x9C, 0x5E, 0xAE, 0x38, 0x28, 0x28, 0x95, 0x34, 0x11, 0x82, 
	0x0E, 0x8A, 0x96, 0x1E, 0x8C, 0xFE, 0xDD, 0x8C, 0x42, 0x7C, 0xA1, 0x9C, 0x4C, 0x30, 0x76, 0xA5, 
	0xC5, 0x1F, 0x1E, 0xB2, 0x45, 0xE6, 0x0C, 0xCE, 0xF1, 0x2F, 0x1C, 0x0A, 0x9C, 0xE2, 0x90, 0x83, 
	0xAD, 0x14, 0x9E, 0x3D, 0x02, 0xCF, 0xE1, 0x29, 0x16, 0x9F, 0xA7, 0x9E, 0x7F, 0x29, 0xB9, 0x26, 
	0x9D, 0x04, 0x2D, 0x49, 0xA5, 0xA9, 0x09, 0x15, 0xBA, 0xF1, 0xA8, 0x14, 0x41, 0xDF, 0x7B, 0x2B, 
	0x04, 0x99, 0x30, 0xD2, 0xBB, 0x84, 0x23, 0x46, 0x7A, 0x10, 0x6B, 0x9B, 0x19, 0xD1, 0xFD, 0xF3, 
	0x8A, 0xC2, 0x10, 0x77, 0x37, 0xA4, 0x3E, 0x72, 0x70, 0xD5, 0x0F, 0xA4, 0x42, 0x7F, 0xBE, 0x49, 
	0xA5, 0x3C, 0x1A, 0xD1, 0x7E, 0xB0, 0xBE, 0xC3, 0x11, 0x48, 0x96, 0x91, 0x10, 0xAD, 0xF1, 0x93, 
	0xC0, 0xDA, 0x34, 0x59, 0x37, 0x79, 0x53, 0xFC, 0xBB, 0x7C, 0x19, 0x03, 0x72, 0xCE, 0x2F, 0xB1, 
	0x67, 0x7E, 0xFD, 0x30, 0xC3, 0x0C, 0x0A, 0x87, 0x30, 0xC4, 0x03, 0x05, 0x07, 0xE0, 0xC0, 0xDC, 
	0xE6, 0x6A, 0x69, 0x8C, 0x43, 0x9D, 0x89, 0x28, 0x4D, 0x21, 0x2A, 0x94, 0xA4, 0x6D, 0xE7, 0x5E, 
	0x90, 0x37, 0x75, 0x32, 0x5F, 0x5F, 0xDA, 0x8F, 0xE2, 0x7D, 0x5E, 0xB1, 0x6E, 0xF1, 0x3F, 0xC5, 
	0x3E, 0xDC, 0x3B, 0xF0, 0x83, 0x28, 0x5A, 0x4B, 0xCF, 0x53, 0x67, 0xE1, 0xDA, 0xDD, 0x85, 0x66, 
	0x28, 0x9C, 0x5C, 0x58, 0x53, 0xAC, 0xD3, 0xFA, 0x52, 0x1C, 0x53, 0x5E, 0x18, 0x75, 0x88, 0xBF, 
	0xB9, 0x15, 0xBA, 0x85, 0x70, 0xB4, 0xFB, 0x80, 0x4D, 0x31, 0x8F, 0x4C, 0x20, 0xEC, 0xE5, 0x96, 
	0x8C, 0xE5, 0xBA, 0xBF, 0xB8, 0x28, 0x0E, 0x10, 0xD9, 0x83, 0x42, 0xB8, 0x52, 0xDD, 0x80, 0xEF, 
	0x1A, 0x69, 0x4A, 0xBB, 0x6B, 0x59, 0x6A, 0xEC, 0xEA, 0x79, 0xFB, 0x0A, 0xD0, 0xF4, 0xB7, 0x99, 
	0x0F, 0x1A, 0x9E, 0xFF, 0x31, 0x5E, 0x3E, 0x68, 0x68, 0x61, 0x22, 0x90, 0x13, 0xC3, 0x42, 0xF3, 
	0xE3, 0x6C, 0x18, 0xFA, 0x22, 0xF6, 0xC0, 0xD1, 0xA9, 0x3B, 0x9B, 0x45, 0xA9, 0x5F, 0xC7, 0x04, 
	0xD3, 0x3A, 0xDA, 0xB6, 0xFC, 0xB8, 0x7A, 0x82, 0xB6, 0x21, 0x83, 0x18, 0x55, 0x0A, 0x9D, 0x29, 
	0xB0, 0xC0, 0xF6, 0x69, 0xE1, 0x44, 0x76, 0x14, 0x58, 0x06, 0x17, 0xAE, 0x71, 0xAC, 0x06, 0x6A, 
	0x7C, 0x07, 0x80, 0x1F, 0x57, 0x9F, 0xC7, 0x52, 0xC7, 0x46, 0xC6, 0x5F, 0x2F, 0x15, 0xEB, 0x3D, 
	0x76, 0x34, 0x94, 0x15, 0x8F, 0x40, 0x65, 0xB6, 0x20, 0x83, 0x5D, 0xB4, 0x8A, 0x67, 0x98, 0xF3, 
	0x6C, 0xD3, 0xAD, 0x5B, 0x38, 0x91, 0xD8, 0x3E, 0xC3, 0xD8, 0x5A, 0xCB, 0x58, 0xB2, 0x08, 0x7A, 
	0x71, 0x21, 0x20, 0x1C, 0xFE, 0x2C, 0x61, 0x2B, 0x79, 0x1E, 0xFA, 0xE8, 0xB0, 0x00, 0xB6, 0xB0, 
	0x8F, 0x18, 0xC5, 0x17, 0xE0, 0xF9, 0xA3, 0xC9, 0x69 };

// Bootstrap/Integral Function (HASH_TABLE_CONTAINS - opcode 0xC5C4): Hash table contains.
#define hash_table_contains_key cb98942d078c7a1c
#define hash_table_contains_size a4dfa4dfa4c9624f
#define hash_table_contains_crc ab6b489eef1444c0
#define hash_table_contains_data d9813105d7799bbb
static uint64_t hash_table_contains_key = UINT64_C(0xCAE89B680AD64B62);
static uint64_t hash_table_contains_size = UINT64_C(0x1C2);
static uint64_t hash_table_contains_crc = UINT64_C(0xED741964B24E5EFE);
static uint8_t hash_table_contains_data[] = {
	0xBF, 0x12, 0xF2, 0xEC, 0x66, 0x2E, 0xFC, 0xAF, 0xB5, 0x3B, 0x4F, 0x9F, 0x73, 0x5E, 0x23, 0xD0, 0x73, 
	0x42, 0x5C, 0xF3, 0x10, 0xCA, 0xB5, 0x02, 0xE2, 0xE4, 0xDA, 0xD3, 0x6F, 0xC0, 0xBC, 0x81, 0xCE, 
	0x94, 0xA1, 0x01, 0x9A, 0x17, 0x5A, 0xC8, 0x12, 0xD7, 0x67, 0xE7, 0x93, 0x5C, 0xE6, 0x01, 0x71, 
	0x70, 0x3A, 0xAE, 0x23, 0x03, 0x33, 0x49, 0x8F, 0x5B, 0xA5, 0xF7, 0x75, 0xF1, 0xB3, 0x64, 0x8F, 
	0x58, 0x7A, 0xB6, 0x50, 0x45, 0xBA, 0x54, 0xBA, 0xEC, 0x3D, 0x2E, 0x35, 0x8D, 0x6A, 0xF8, 0x64, 
	0x58, 0x5A, 0xD7, 0x87, 0xAC, 0x48, 0x15, 0x21, 0xF3, 0x5E, 0x14, 0x80, 0x55, 0x19, 0x24, 0x1C, 
	0x6C, 0x87, 0xBB, 0x69, 0x40, 0xC9, 0x7F, 0x69, 0xC2, 0x5E, 0xE6, 0xBB, 0x9F, 0x06, 0x9E, 0x2D, 
	0x8A, 0xCA, 0xF3, 0xCF, 0xA3, 0x2A, 0x80, 0xD2, 0x44, 0x69, 0x79, 0xF4, 0x6B, 0xB3, 0x5B, 0xB8, 
	0x6D, 0xF4, 0x12, 0x99, 0x52, 0x5F, 0x37, 0xF4, 0x95, 0x91, 0x1B, 0xBA, 0xE7, 0x3D, 0xBF, 0xA3, 
	0xC0, 0xD5, 0x16, 0x08, 0xBD, 0x64, 0xD0, 0x27, 0x19, 0x35, 0xD0, 0x66, 0x47, 0xB2, 0x63, 0xC9, 
	0xF2, 0xC3, 0xAD, 0x1A, 0x7B, 0x0D, 0x94, 0x9F, 0x27, 0x2A, 0xC3, 0x3F, 0xEA, 0xCF, 0x0A, 0x98, 
	0x6A, 0x39, 0x56, 0x2F, 0xAE, 0x28, 0xBC, 0x92, 0x2A, 0x21, 0xED, 0xB6, 0xE3, 0xB7, 0xF8, 0xFF, 
	0xA3, 0xFB, 0x64, 0x3F, 0xFA, 0xA6, 0x39, 0xA3, 0xC7, 0x83, 0xDE, 0x93, 0xF9, 0x71, 0xBF, 0x9E, 
	0x01, 0xFD, 0x96, 0x06, 0x32, 0xD5, 0x55, 0x57, 0x6F, 0xB1, 0x46, 0xA1, 0xD2, 0xE0, 0xEE, 0x3A, 
	0xC5, 0x4D, 0xC4, 0x7C, 0xCB, 0xA2, 0x9A, 0xD4, 0xB1, 0x7F, 0x14, 0x9F, 0x98, 0x05, 0x8E, 0xAD, 
	0x69, 0x24, 0x11, 0xAE, 0xD2, 0x18, 0xB7, 0xC5, 0x95, 0x55, 0xAC, 0xC2, 0xFB, 0x6A, 0xEB, 0xF1, 
	0x93, 0x05, 0xB2, 0xC2, 0x39, 0x9C, 0xEB, 0x1A, 0xA6, 0x54, 0xCC, 0x17, 0x15, 0x19, 0xBF, 0x90, 
	0xDB, 0x7E, 0xB2, 0xE5, 0x76, 0x0A, 0x21, 0x0B, 0x17, 0xE6, 0x1B, 0x43, 0x21, 0xB0, 0x14, 0x12, 
	0x48, 0x75, 0x07, 0xA5, 0xDC, 0xAC, 0x8C, 0x61, 0xD9, 0xAB, 0x71, 0xF1, 0x02, 0xF3, 0xB4, 0x21, 
	0x5D, 0x79, 0xD5, 0x16, 0xB8, 0x92, 0x96, 0x54, 0x39, 0x61, 0xD3, 0xB7, 0x23, 0x72, 0xC5, 0x92, 
	0xED, 0xCC, 0x82, 0x98, 0xCA, 0x26, 0x3B, 0x99, 0x67, 0x44, 0x63, 0xA3, 0xEF, 0xD8, 0xCE, 0x6D, 
	0x94, 0x85, 0xCC, 0x09, 0x78, 0xBC, 0x60, 0xE1, 0x91, 0x19, 0xE0, 0x3E, 0x6A, 0x2B, 0x39, 0x75, 
	0xF1, 0x53, 0x0B, 0x50, 0x22, 0x1D, 0x52, 0xD6, 0xB8, 0x4C, 0xB0, 0xED, 0x3C, 0x3B, 0xED, 0x72, 
	0xEE, 0x32, 0xF8, 0xC4, 0x93, 0x7B, 0x4F, 0x39, 0xF2, 0xA6, 0xE2, 0x65, 0x4A, 0xE5, 0x07, 0xC2, 
	0xD4, 0x19, 0x40, 0x2B, 0x3D, 0x93, 0xF2, 0x55, 0x2A, 0x5C, 0x0B, 0x47, 0xAA, 0x11, 0x2A, 0xBA, 
	0x49, 0x77, 0x6A, 0xEB, 0xD9, 0xA0, 0xC0, 0xFD, 0xF6, 0x2D, 0xB1, 0x1E, 0x11, 0x22, 0x40, 0x62, 
	0x47, 0xD2, 0xE3, 0xE4, 0x44, 0xF5, 0xB2, 0x1D, 0x72, 0x9F, 0xFB, 0x37, 0xC3, 0x58, 0x3E, 0x6E, 
	0xF5, 0x5E, 0x76, 0x30, 0x1B, 0xFE, 0xBA, 0x5A, 0x07, 0x55, 0x67, 0xB8, 0xC2, 0x19, 0xBB, 0xE8, 
	0xD0 };

// Bootstrap/Integral Function (HASH_TABLE_SET - opcode 0xD0F3): Hash table set.
#define hash_table_set_key c1e601e60068a012
#define hash_table_set_size bc55e51c4ae4c3f7
#define hash_table_set_crc f557f46d82fbda38
#define hash_table_set_data e5e17e0f422f96d3
static uint64_t hash_table_set_key = UINT64_C(0x2C1F32F292BFA5C1);
static uint64_t hash_table_set_size = UINT64_C(0x853);
static uint64_t hash_table_set_crc = UINT64_C(0xA7FAAA372A7556BC);
static uint8_t hash_table_set_data[] = {
	0xB4, 0xB8, 0x02, 0x6A, 0x5E, 0x5B, 0xC6, 0x88, 0x32, 0x6E, 0xC8, 0xF6, 0x04, 0xD6, 0x47, 0x6E, 0x86, 
	0x05, 0x6C, 0x32, 0x3F, 0x96, 0x7F, 0x1B, 0x31, 0x0C, 0x2B, 0x37, 0x79, 0xBE, 0xDB, 0x22, 0x9A, 
	0x73, 0xF6, 0x36, 0x7B, 0x98, 0x4A, 0x3F, 0x2E, 0xD0, 0x71, 0xCF, 0x2F, 0x79, 0x03, 0xCA, 0x7E, 
	0x59, 0xB3, 0xE7, 0xB7, 0x12, 0x41, 0xC8, 0x21, 0x25, 0x16, 0x37, 0xD5, 0x77, 0x71, 0x6D, 0xBA, 
	0x03, 0x1F, 0xDF, 0xC1, 0x39, 0x74, 0xC7, 0x00, 0x3F, 0x22, 0xD6, 0xD8, 0x45, 0xFC, 0x85, 0x52, 
	0x65, 0x86, 0x91, 0x35, 0x57, 0x7B, 0xE7, 0x5F, 0x87, 0x4B, 0x58, 0x10, 0x0F, 0xFC, 0x8C, 0x5E, 
	0x05, 0x95, 0xC5, 0x77, 0x7D, 0x0D, 0x6C, 0xEC, 0x37, 0xE6, 0xBD, 0x5D, 0x94, 0x70, 0x8E, 0x04, 
	0x89, 0xD7, 0xB7, 0x85, 0x61, 0x0B, 0xB1, 0x4C, 0xCF, 0x3A, 0x15, 0x9B, 0x1E, 0xA0, 0x30, 0xC6, 
	0x0A, 0x94, 0xF5, 0x9C, 0x2D, 0x56, 0x0A, 0x05, 0x75, 0x76, 0x9C, 0x66, 0xA7, 0xDE, 0x1C, 0x88, 
	0x62, 0x02, 0x8B, 0xD7, 0x9C, 0x96, 0x16, 0xC5, 0x65, 0xB9, 0x50, 0x7A, 0xEF, 0xB3, 0x57, 0xC7, 
	0x0A, 0xCB, 0xC0, 0x58, 0x27, 0x18, 0x32, 0x12, 0x29, 0x4E, 0xC8, 0xBB, 0x2B, 0x3F, 0x51, 0x4A, 
	0x4F, 0xAD, 0x6C, 0x1E, 0x32, 0xF5, 0xA0, 0x83, 0xDB, 0x0E, 0x03, 0xAD, 0x61, 0xBA, 0x0D, 0x71, 
	0x2E, 0xD9, 0xC5, 0x50, 0x88, 0x13, 0x98, 0x0F, 0x1D, 0x0D, 0x20, 0xCA, 0xBA, 0xE3, 0x84, 0xE7, 
	0x18, 0x16, 0x7C, 0xC4, 0x27, 0x09, 0xDF, 0x75, 0x24, 0x73, 0x46, 0x75, 0x69, 0x3F, 0xEA, 0x19, 
	0xA9, 0x0A, 0xE8, 0xA7, 0xB0, 0x67, 0xF7, 0x73, 0x02, 0xA3, 0xA6, 0x37, 0x53, 0xED, 0x62, 0x75, 
	0x2C, 0x81, 0x1B, 0x36, 0x22, 0xD2, 0xC9, 0x6D, 0x01, 0xAA, 0xF0, 0xC2, 0x53, 0x5D, 0xEE, 0xE4, 
	0xF5, 0xD7, 0x56, 0xD4, 0xAF, 0xFF, 0x3B, 0x89, 0x6C, 0x3D, 0xF3, 0x08, 0xEB, 0xC0, 0xB2, 0xD9, 
	0x4E, 0x32, 0x14, 0xB9, 0x82, 0x73, 0xCA, 0x10, 0xFB, 0xE2, 0xB7, 0xAC, 0xF9, 0x26, 0x5E, 0xC9, 
	0xED, 0x0D, 0xA7, 0x76, 0x13, 0x4B, 0x1C, 0xC0, 0x92, 0x9A, 0x68, 0xAB, 0xDB, 0x68, 0x8E, 0x98, 
	0x97, 0x8C, 0x93, 0xB8, 0xD7, 0x81, 0xBD, 0x02, 0x96, 0x14, 0xE0, 0x43, 0x1A, 0x8A, 0x6F, 0x68, 
	0x9B, 0x55, 0x93, 0x15, 0xFF, 0x04, 0x5A, 0x05, 0x84, 0xFB, 0x64, 0x92, 0x91, 0x95, 0x45, 0x5E, 
	0x55, 0x3A, 0x68, 0xDC, 0x24, 0xB7, 0x78, 0xF6, 0xA3, 0xA1, 0xF9, 0xDA, 0x27, 0xCF, 0x34, 0xEC, 
	0xA8, 0xB5, 0xF0, 0x81, 0x87, 0x3C, 0xC2, 0x7A, 0x41, 0xAD, 0x39, 0x23, 0xEB, 0x06, 0xCA, 0xEA, 
	0x18, 0x7F, 0xE1, 0xD6, 0x83, 0xA0, 0xAB, 0x00, 0x4B, 0xE2, 0xDA, 0x48, 0xF5, 0x54, 0x6B, 0xEE, 
	0x91, 0xF6, 0xE5, 0x93, 0x9B, 0xD4, 0xE0, 0xF4, 0xFE, 0x85, 0xEF, 0x26, 0xD7, 0x87, 0xF8, 0xAE, 
	0x68, 0x75, 0xE6, 0x46, 0x62, 0x74, 0xC7, 0x5B, 0x51, 0xA3, 0x90, 0x2C, 0x84, 0x28, 0x34, 0x4B, 
	0x1A, 0x10, 0x70, 0xCE, 0xE6, 0x74, 0xB2, 0xAE, 0x7F, 0xA6, 0xDB, 0x30, 0x23, 0x90, 0x4C, 0x0F, 
	0xBA, 0x33, 0xD6, 0x21, 0xF8, 0x2A, 0xAF, 0xC8, 0x6D, 0x9B, 0xFE, 0xE8, 0xF5, 0x48, 0xA5, 0x4D, 
	0xEA, 0x78, 0x1D, 0x6B, 0x3E, 0x15, 0xA9, 0xE9, 0x47, 0x1B, 0xF7, 0x69, 0xB8, 0xE2, 0x8D, 0x13, 
	0x45, 0x9A, 0x73, 0x66, 0x6B, 0xEE, 0xFF, 0x57, 0x51, 0x6E, 0xEB, 0xDA, 0xB6, 0xDA, 0x14, 0xB2, 
	0xC6, 0x48, 0xFE, 0xFA, 0xC9, 0xC3, 0x2A, 0x4B, 0x86, 0x20, 0xA0, 0xA7, 0x7C, 0x5F, 0xBF, 0x57, 
	0x5A, 0xC4, 0x8F, 0x59, 0xF3, 0xFE, 0x52, 0x90, 0x5A, 0xEC, 0x01, 0x20, 0xF7, 0x8E, 0x6F, 0x5A, 
	0x12, 0x1C, 0x73, 0x54, 0xDE, 0x28, 0x88, 0xE0, 0x3E, 0x5C, 0x1C, 0xE0, 0xBD, 0x87, 0x65, 0xBD, 
	0x31, 0x1F, 0x90, 0x93, 0x54, 0x99, 0xD3, 0xF0, 0xF0, 0x18, 0xD6, 0x64, 0x32, 0x92, 0x83, 0xF2, 
	0x15, 0x78, 0x69, 0xFD, 0xBD, 0xD3, 0x12, 0xEE, 0x5F, 0x87, 0x96, 0xD5, 0xF1, 0x76, 0x1A, 0x97, 
	0xBB, 0x2B, 0x15, 0x56, 0xB2, 0x61, 0xB6, 0xBE, 0xDB, 0x23, 0x69, 0xFB, 0xA1, 0xC5, 0xE5, 0x49, 
	0xDF, 0x52, 0x8C, 0x5F, 0x21, 0xA8, 0xA1, 0x60, 0xF7, 0xF1, 0xE9, 0xB9, 0x0D, 0x7E, 0x5B, 0x44, 
	0x24, 0xCE, 0x72, 0xFB, 0x22, 0x5C, 0x3B, 0x47, 0xF3, 0xF1, 0xF4, 0x01, 0x33, 0x56, 0xA1, 0x55, 
	0x55, 0x11, 0xAD, 0x8D, 0xEB, 0xC3, 0xF7, 0x10, 0x6C, 0xDC, 0x68, 0x2E, 0x51, 0x6B, 0xD5, 0xD5, 
	0x90, 0xA0, 0x8E, 0x40, 0x83, 0x3E, 0x88, 0xC6, 0xF6, 0x10, 0x25, 0xD5, 0x92, 0x08, 0x88, 0x78, 
	0x9E, 0x71, 0x0E, 0xC9, 0xCF, 0xF6, 0xBC, 0xBC, 0xAC, 0x45, 0xCD, 0x00, 0x7D, 0x7C, 0x75, 0x34, 
	0xD2, 0xAB, 0x5A, 0x92, 0x60, 0x34, 0x41, 0x88, 0xA7, 0x56, 0x14, 0xA9, 0x93, 0xCC, 0x7E, 0xDB, 
	0x5F, 0xDE, 0x10, 0x6C, 0xA2, 0x35, 0xC3, 0xAF, 0x63, 0xD4, 0x09, 0xBB, 0x2B, 0x4C, 0xA4, 0xE6, 
	0xD7, 0x35, 0x2A, 0xF2, 0xFF, 0x3F, 0xA0, 0x96, 0x40, 0x24, 0xFE, 0x21, 0x97, 0x9D, 0x5B, 0xA4, 
	0x4B, 0x48, 0x42, 0x24, 0xC4, 0x04, 0x1F, 0xB5, 0x21, 0x7E, 0xCD, 0xBD, 0x0F, 0x7A, 0x02, 0x46, 
	0x25, 0x4E, 0x59, 0x55, 0x85, 0x27, 0x38, 0x9E, 0x98, 0x47, 0x98, 0xB2, 0x60, 0xB7, 0xE0, 0x97, 
	0x91, 0xC0, 0x30, 0x42, 0xF7, 0x28, 0xAE, 0x91, 0x14, 0xC4, 0x22, 0x86, 0xA4, 0x0C, 0xAB, 0xEC, 
	0x5B, 0x67, 0x15, 0xE4, 0x2A, 0x98, 0x8F, 0xD9, 0x68, 0xF6, 0x71, 0x38, 0xE7, 0xD4, 0x18, 0x05, 
	0xC9, 0x4C, 0x71, 0xE7, 0x71, 0xCC, 0xF4, 0xB0, 0x3F, 0x1D, 0xF0, 0x21, 0xF8, 0x5E, 0x5C, 0xA2, 
	0x89, 0xFB, 0x49, 0x80, 0xB2, 0xB8, 0xB0, 0xA2, 0x5E, 0x01, 0x4E, 0xC5, 0x29, 0x4B, 0x22, 0x97, 
	0x4C, 0xFE, 0xFC, 0xBD, 0xD1, 0x11, 0xEE, 0x97, 0x16, 0x44, 0x41, 0x8F, 0x78, 0x9E, 0xEC, 0xFF, 
	0xB1, 0x6C, 0xD9, 0xB1, 0x3C, 0x86, 0x0F, 0x4F, 0xDA, 0xD5, 0x9D, 0x6B, 0x73, 0x5C, 0x63, 0x10, 
	0xB8, 0x8D, 0x50, 0x68, 0x0A, 0xA1, 0xA7, 0x03, 0xF0, 0xB0, 0x97, 0x34, 0x00, 0xB4, 0xE3, 0x41, 
	0xF6, 0x81, 0x83, 0xD7, 0x48, 0x73, 0x31, 0xC6, 0x29, 0x6B, 0x2D, 0x6A, 0x75, 0x6E, 0x21, 0xCE, 
	0x69, 0x91, 0x67, 0x9B, 0x77, 0x55, 0xE7, 0x16, 0x36, 0xC2, 0xD3, 0xEB, 0xA0, 0xED, 0x00, 0xAC, 
	0x50, 0x40, 0x78, 0x01, 0x42, 0xE0, 0x03, 0x33, 0x8C, 0x7A, 0x27, 0x79, 0x2B, 0x08, 0xB2, 0xAC, 
	0x33, 0xB4, 0x86, 0x58, 0xEF, 0xC4, 0xF8, 0xCC, 0xA0, 0x7C, 0x3B, 0x5C, 0x33, 0x2E, 0x3D, 0x7F, 
	0xD3, 0xBD, 0xD1, 0xEF, 0xE5, 0xE5, 0xBC, 0x01, 0xA1, 0xB3, 0x39, 0x04, 0x40, 0x63, 0xB8, 0xA0, 
	0x99, 0xD1, 0xF0, 0xDA, 0x69, 0x30, 0x4A, 0xD6, 0xE6, 0x30, 0xF1, 0x48, 0x57, 0x1F, 0x21, 0x0B, 
	0x94, 0x34, 0xFB, 0x17, 0xD3, 0xAD, 0xDE, 0xA6, 0x86, 0x5A, 0xD8, 0x30, 0xE1, 0x42, 0xEA, 0x67, 
	0x93, 0x90, 0xC9, 0xDA, 0x74, 0x96, 0x66, 0xD0, 0x83, 0xEC, 0xE4, 0x5B, 0xE1, 0x95, 0x17, 0x37, 
	0x13, 0x05, 0xF7, 0xCF, 0xC8, 0x96, 0x07, 0x72, 0x75, 0xE9, 0xDE, 0xEC, 0xAB, 0x57, 0x24, 0x84, 
	0xA9, 0xA7, 0xBA, 0x1D, 0x18, 0x05, 0xB2, 0x40, 0xB1, 0xFA, 0x12, 0x4C, 0x04, 0xA9, 0xBF, 0x88, 
	0x4D, 0x6E, 0x69, 0xA2, 0xFD, 0xEA, 0x83, 0x58, 0xE4, 0x94, 0x69, 0xD2, 0x32, 0x38, 0x3F, 0xD4, 
	0xBE, 0xC4, 0x4F, 0x9F, 0xBF, 0xF5, 0xB4, 0x01, 0x35, 0x6E, 0x54, 0xD7, 0x8B, 0x48, 0x58, 0x6E, 
	0xD9, 0x65, 0x8D, 0x8A, 0x72, 0xAD, 0x9A, 0x90, 0xB4, 0x49, 0xDA, 0x9B, 0xBE, 0x27, 0xD6, 0x05, 
	0xAF, 0xAC, 0xAA, 0x70, 0xE5, 0x80, 0xF5, 0x89, 0x59, 0xE1, 0xCB, 0x24, 0x62, 0x50, 0x14, 0x8D, 
	0xB9, 0xED, 0x89, 0x55, 0x75, 0xC1, 0xF2, 0xA6, 0x08, 0x4F, 0x78, 0x69, 0xF4, 0xD5, 0xF5, 0x74, 
	0xD3, 0x7E, 0xFF, 0x82, 0x0D, 0x28, 0x03, 0xF3, 0x66, 0x59, 0xD1, 0x28, 0x7E, 0x0D, 0x46, 0x7B, 
	0x99, 0x86, 0x1B, 0x83, 0x4D, 0x94, 0xFA, 0x68, 0x7D, 0x1C, 0x64, 0x9B, 0xA7, 0x23, 0x34, 0x4E, 
	0x4B, 0xE5, 0x3F, 0x1A, 0xF0, 0xF3, 0xFA, 0x08, 0x38, 0x1F, 0x75, 0xF5, 0xF3, 0x61, 0x9D, 0x37, 
	0x1F, 0x71, 0x71, 0x1D, 0x8D, 0xD4, 0xE3, 0xE2, 0x61, 0xF4, 0x7A, 0xDE, 0x1A, 0xF6, 0x5D, 0x08, 
	0xFC, 0x46, 0x3C, 0x8F, 0xBE, 0x10, 0xEE, 0x98, 0x2C, 0x59, 0xA6, 0x98, 0x19, 0x06, 0x1E, 0xCB, 
	0x90, 0xCB, 0xC2, 0x7C, 0xA4, 0xE5, 0xFA, 0x59, 0x21, 0xBD, 0xF8, 0x91, 0x69, 0xC8, 0xAF, 0xD4, 
	0xA4, 0xBF, 0x8F, 0x84, 0xCD, 0x45, 0x42, 0x0C, 0xB1, 0x80, 0xEC, 0x5A, 0xF7, 0x51, 0x24, 0x08, 
	0x04, 0x6F, 0xE9, 0xF7, 0x72, 0xB0, 0x86, 0xB8, 0x61, 0x7A, 0x6E, 0x50, 0x74, 0x29, 0xB7, 0x26, 
	0xF8, 0xFF, 0x1B, 0xA0, 0xFB, 0x3F, 0x55, 0xA7, 0x0B, 0x0C, 0x76, 0xF2, 0xCE, 0xF4, 0x3C, 0xE1, 
	0x35, 0xDE, 0x77, 0x00, 0x23, 0x0E, 0x68, 0xBC, 0x6A, 0xDE, 0xE2, 0x1E, 0x52, 0x72, 0x98, 0x46, 
	0xBC, 0xF1, 0x94, 0x66, 0xF2, 0x66, 0xFC, 0xDF, 0x5E, 0x8C, 0x22, 0xF6, 0x57, 0x9A, 0x33, 0x2E, 
	0x65, 0x85, 0x9D, 0xB9, 0x98, 0x7E, 0x70, 0x67, 0xF5, 0x41, 0xDC, 0xA6, 0xF3, 0x74, 0x17, 0xDF, 
	0x01, 0xFB, 0x84, 0x84, 0x6A, 0x5E, 0x14, 0xF3, 0x6A, 0x53, 0xBA, 0x0F, 0x62, 0x8E, 0xF5, 0x19, 
	0x68, 0x6F, 0xC5, 0x6E, 0xDF, 0xC6, 0xF4, 0x51, 0x0B, 0xCC, 0x2C, 0x0B, 0x2B, 0x8F, 0x6C, 0x62, 
	0x2A, 0x75, 0xB4, 0x3B, 0xF6, 0x31, 0xB3, 0xCE, 0x97, 0x8C, 0x7C, 0xAB, 0x15, 0xC3, 0x90, 0x41, 
	0x92, 0x6F, 0x76, 0xE1, 0x2C, 0x9A, 0x81, 0x9A, 0x2A, 0x16, 0x89, 0x5F, 0x0D, 0x69, 0x7E, 0xFF, 
	0xA8, 0xD4, 0x00, 0x1B, 0x37, 0x43, 0xF2, 0xD2, 0x85, 0x68, 0x8E, 0x50, 0x68, 0x1F, 0x88, 0xEB, 
	0x6B, 0xDD, 0x40, 0x58, 0x8C, 0xF6, 0xBA, 0xCA, 0x02, 0x11, 0x8E, 0x9A, 0xAA, 0x23, 0xE1, 0xD6, 
	0x2B, 0xE8, 0xBA, 0xAF, 0x62, 0x7C, 0xE2, 0xEC, 0xAE, 0x5F, 0x36, 0x31, 0xA8, 0x1C, 0x0B, 0x00, 
	0x4F, 0x62, 0x7F, 0x59, 0xC4, 0x4A, 0xD1, 0xBD, 0xD8, 0xD6, 0xEA, 0x41, 0x31, 0xF7, 0xA9, 0xF9, 
	0x6A, 0x27, 0x4F, 0x57, 0xF7, 0x80, 0xD1, 0x79, 0xDA, 0x06, 0x18, 0xF2, 0x89, 0xD8, 0xF7, 0x17, 
	0x51, 0x3D, 0x2F, 0x3D, 0x9D, 0x61, 0xEF, 0xBF, 0x60, 0xA9, 0xFE, 0x62, 0x19, 0xDF, 0xB2, 0x6C, 
	0x46, 0x97, 0x3A, 0xD8, 0x22, 0x0D, 0x7D, 0x35, 0x72, 0x58, 0xEA, 0x57, 0x17, 0x58, 0x97, 0x9D, 
	0xA1, 0x32, 0xE3, 0x62, 0x64, 0xD1, 0x71, 0x2C, 0x65, 0x7D, 0x9F, 0xE5, 0xB0, 0x02, 0xE3, 0xD5, 
	0x34, 0x0A, 0x5F, 0x0C, 0x9E, 0xA8, 0x4A, 0x6E, 0xC2, 0x49, 0xDA, 0xA2, 0x6B, 0xDC, 0xE7, 0x98, 
	0x70, 0x2E, 0xE5, 0x6D, 0x47, 0xF6, 0x48, 0x8A, 0x02, 0x2D, 0xED, 0x74, 0x58, 0xAF, 0xD3, 0xF6, 
	0x1A, 0x69, 0x55, 0xC6, 0x76, 0x0D, 0xFE, 0x14, 0x49, 0xA7, 0x24, 0xAB, 0x61, 0x28, 0x02, 0xF1, 
	0xE6, 0xDC, 0x83, 0x5A, 0xF7, 0x02, 0x6E, 0x96, 0x95, 0x75, 0x20, 0x1A, 0xDE, 0x8E, 0x18, 0x50, 
	0x4E, 0x58, 0xFE, 0xA9, 0x0B, 0x97, 0xB0, 0x50, 0xB9, 0x05, 0x8B, 0x37, 0xA8, 0x10, 0x0E, 0xC9, 
	0x37, 0x85, 0xA4, 0x24, 0x63, 0xF2, 0x5F, 0x13, 0x74, 0xC6, 0xFB, 0xDE, 0xDE, 0x43, 0x4B, 0x6A, 
	0x13, 0x11, 0x3A, 0xF0, 0x4D, 0xF1, 0x11, 0xB3, 0xDB, 0x37, 0x3E, 0xB5, 0x3E, 0x32, 0x19, 0xFF, 
	0x8C, 0x41, 0xCD, 0x4E, 0x1F, 0xF9, 0xB7, 0x13, 0x63, 0x33, 0x73, 0x68, 0x58, 0x58, 0x74, 0xDA, 
	0xED, 0xB7, 0x4A, 0x87, 0xF2, 0x58, 0xCF, 0x71, 0xC4, 0x54, 0x26, 0xA1, 0x91, 0x9D, 0xBC, 0xDB, 
	0x0F, 0x88, 0x3E, 0xC4, 0x6B, 0x20, 0x85, 0x80, 0xC1, 0xF4, 0xAA, 0xF5, 0x8E, 0x6D, 0xA8, 0x59, 
	0x01, 0x83, 0x28, 0x06, 0xA5, 0x67, 0xF1, 0xD3, 0x3B, 0x02, 0x50, 0xBB, 0x98, 0x57, 0x6C, 0x15, 
	0x56, 0xB6, 0x49, 0xDB, 0xA3, 0x08, 0xCC, 0xF0, 0x60, 0x0C, 0x89, 0x90, 0x7C, 0x6D, 0x53, 0x28, 
	0x46, 0x36, 0x7F, 0x6D, 0xC6, 0xEC, 0x90, 0x27, 0xA8, 0x51, 0x5A, 0xEA, 0xD1, 0x7E, 0x34, 0xC6, 
	0x91, 0x9E, 0x2B, 0x6C, 0xCA, 0xE6, 0xE8, 0x8C, 0x95, 0xD4, 0x54, 0x55, 0x6D, 0x0C, 0xF0, 0x17, 
	0x6D, 0x01, 0x01, 0x7F, 0x13, 0x06, 0x4C, 0xAA, 0x3B, 0xD2, 0xDC, 0x86, 0x31, 0xB7, 0xB5, 0x8D, 
	0x9D, 0x52, 0x28, 0x2F, 0x62, 0xCE, 0x14, 0x36, 0x3C, 0x9B, 0xAC, 0x18, 0x50, 0x91, 0x5C, 0x0D, 
	0x73, 0x0E, 0x9C, 0x74, 0x72, 0xD7, 0xBF, 0x08, 0xDE, 0xEF, 0x5F, 0x9A, 0xE4, 0xAD, 0xB9, 0xA7, 
	0x94, 0x4B, 0x05, 0x56, 0xC0, 0x8C, 0x1F, 0x23, 0x10, 0xA0, 0x10, 0xA2, 0x7E, 0xB2, 0x96, 0x78, 
	0xD4, 0xB5, 0x66, 0xF4, 0x97, 0xDC, 0xC1, 0x7D, 0x40, 0xA9, 0xC6, 0xBA, 0x6B, 0x44, 0xC5, 0xF1, 
	0x9A, 0x55, 0xC7, 0xD1, 0x17, 0x5E, 0x6B, 0x80, 0x8C, 0xC8, 0x47, 0x88, 0x77, 0x4F, 0xD1, 0xD4, 
	0x6C, 0x83, 0x1A, 0x69, 0x32, 0xD6, 0x38, 0x72, 0x23, 0xE5, 0xA5, 0xF4, 0x5E, 0xFE, 0x6D, 0x92, 
	0xC1, 0xA3, 0x85, 0x14, 0xEB, 0x6B, 0x52, 0x8B, 0x9B, 0xA4, 0x85, 0xBD, 0x02, 0xCF, 0x1C, 0xA5, 
	0x40, 0xC2, 0xF6, 0x9C, 0xC1, 0x5C, 0x84, 0xB3, 0x72, 0x20, 0xB7, 0x08, 0x40, 0xCA, 0x31, 0x09, 
	0xEF, 0xB2, 0xDD, 0x2B, 0x9D, 0x9A, 0x42, 0xE3, 0xC7, 0xF5, 0xD2, 0xA4, 0x13, 0xED, 0x4A, 0x6E, 
	0x73, 0x70, 0x27, 0x21, 0x92, 0x13, 0x4D, 0x00, 0x04, 0xFA, 0x29, 0x45, 0xF7, 0x61, 0x26, 0x06, 
	0xAD, 0xE4, 0x1C, 0x7C, 0xC3, 0xD2, 0x61, 0xF3, 0xE9, 0xD6, 0x4C, 0xFD, 0xAD, 0x16, 0x91, 0xBA, 
	0x48, 0x0E, 0x44, 0xA2, 0x2F, 0x7D, 0xAA, 0x72, 0x56, 0x6D, 0x51, 0x62, 0x63, 0xCA, 0x36, 0xF9, 
	0xC9, 0x83, 0xDE, 0xF3, 0xBE, 0xC4, 0xB5, 0xB7, 0xC9, 0x3E, 0x54, 0xBE, 0x5D, 0x0C, 0x52, 0xDE, 
	0xF8, 0x5C, 0x8D, 0x59, 0x98, 0xCA, 0x8D, 0x75, 0x34, 0xE7, 0xEE, 0xAA, 0x63, 0xCD, 0x91, 0x09, 
	0xA6, 0x85, 0x2A, 0xF1, 0xDF, 0xAF, 0xAA, 0xA9, 0xA7, 0x58, 0x98, 0xEF, 0x9A, 0x53, 0x4F, 0x60, 
	0x7D, 0x9B, 0x9F, 0x81, 0x06, 0xCD, 0x76, 0x7E, 0x5C, 0x7E, 0x8B, 0xE5, 0x86, 0x52, 0xE0, 0x50, 
	0xB2, 0xC4, 0x7D, 0x39, 0xD1, 0xD4, 0xEA, 0x0A, 0x6E, 0xC0, 0xBF, 0xA7, 0xF8, 0x30, 0x42, 0x9F, 
	0x80, 0x3C, 0xD9, 0x53, 0x6F, 0x6B, 0x84, 0x52, 0x26, 0xF7, 0x86, 0xCD, 0x2C, 0x81, 0xDD, 0x60, 
	0xCE, 0x62, 0xEC, 0x3F, 0xF4, 0x06, 0x89, 0x6D, 0xBC, 0xBE, 0xC3, 0xEC, 0x82, 0x4F, 0x4D, 0x17, 
	0x87, 0x11, 0x0C, 0xF6, 0xA5, 0x14, 0xDB, 0xF9, 0x2A, 0x87, 0x2B, 0xF4, 0xB1, 0x10, 0xDE, 0xDD, 
	0xEB, 0x47, 0x8F, 0x5C, 0xB7, 0x02, 0x95, 0x0E, 0x5F, 0xDE, 0x1B, 0x01, 0x78, 0xE0, 0x2B, 0x5A, 
	0xF8, 0x57, 0xB6, 0xC5, 0xA3, 0x53, 0xCB, 0xDB, 0xF6, 0xB5, 0x67, 0x83, 0x94, 0xEC, 0x4C, 0x1F, 
	0x8B, 0xC0, 0x52, 0x2A, 0x04, 0x2A, 0xB4, 0x4B, 0x29, 0x50, 0xDC, 0xEF, 0x74, 0x05, 0x33, 0x6D, 
	0x47, 0x44, 0x58, 0x89, 0x10, 0x1A, 0x6F, 0xC2, 0x97, 0xF7, 0x6B, 0xCF, 0x81, 0x8A, 0xF7, 0x74, 
	0xDE, 0xDA, 0x78, 0x56, 0x95, 0x63, 0x9F, 0x87, 0x5A, 0x3F, 0x82, 0x82, 0xAD, 0x59, 0x24, 0xDD, 
	0x02, 0xB2, 0x41, 0x2C, 0x47, 0x90, 0x4C, 0x08, 0xAE, 0x3C, 0x72, 0xBE, 0x5F, 0xFC, 0x04, 0x75, 
	0xFA, 0x40 };

// Bootstrap/Integral Function (HASH_TABLE_GET - opcode 0xE33C): Hash table get.
#define hash_table_get_key c20e2c8b4b0d30f4
#define hash_table_get_size f1c8296064f761d7
#define hash_table_get_crc e5106d19fb34c584
#define hash_table_get_data f2fa448dd699102a
static uint64_t hash_table_get_key = UINT64_C(0x2CB076AFA22564A5);
static uint64_t hash_table_get_size = UINT64_C(0x1DB);
static uint64_t hash_table_get_crc = UINT64_C(0x221A7870393615C8);
static uint8_t hash_table_get_data[] = {
	0xC2, 0x59, 0x6F, 0x9B, 0xAB, 0x02, 0x4D, 0x39, 0xFF, 0x9A, 0x87, 0x3C, 0x9B, 0xE3, 0x73, 0xBD, 0x59, 
	0x40, 0xDB, 0x61, 0x97, 0x4C, 0xA8, 0x2D, 0x32, 0x06, 0x8A, 0xB6, 0x08, 0x74, 0x4C, 0x94, 0xC7, 
	0x9A, 0x3B, 0x7C, 0x6E, 0x21, 0x81, 0x00, 0xE1, 0x35, 0x5C, 0x72, 0xED, 0x29, 0xBC, 0x0A, 0xEA, 
	0x24, 0x55, 0xFD, 0xFF, 0x3D, 0xD8, 0x0C, 0xEE, 0xDF, 0x76, 0x7D, 0x07, 0xAC, 0xDF, 0x55, 0x51, 
	0x99, 0xDB, 0x0B, 0xAA, 0x15, 0xA1, 0x0B, 0x64, 0x05, 0xE5, 0xC2, 0x14, 0x2C, 0x31, 0xBD, 0xBF, 
	0x14, 0x79, 0xCF, 0x16, 0x61, 0x54, 0x68, 0x17, 0x35, 0x8C, 0x0F, 0x8F, 0x79, 0xF0, 0x72, 0xDF, 
	0x6E, 0xF1, 0x46, 0x01, 0x5D, 0x89, 0x56, 0x28, 0x33, 0xC3, 0x67, 0x5D, 0xCB, 0x53, 0x6F, 0x6A, 
	0x8E, 0x8C, 0xB7, 0xDC, 0x87, 0x32, 0x35, 0xDE, 0x1B, 0x63, 0x7D, 0x43, 0xA1, 0x41, 0xC7, 0x05, 
	0x54, 0xCB, 0x60, 0xE7, 0x8D, 0x04, 0xA4, 0x83, 0xA0, 0x14, 0x9A, 0xCA, 0x26, 0x12, 0x06, 0xCF, 
	0x51, 0x25, 0xF1, 0x70, 0x86, 0x7A, 0x6D, 0x4E, 0x33, 0xD8, 0x88, 0x20, 0xE1, 0x54, 0xBE, 0x92, 
	0x90, 0x0A, 0x85, 0xA9, 0x13, 0x81, 0xDA, 0xE0, 0x1A, 0xC5, 0x9E, 0xB3, 0xB0, 0x0F, 0xCC, 0x31, 
	0xA7, 0xA7, 0xA5, 0xF4, 0x59, 0x73, 0x97, 0xFA, 0xE5, 0x80, 0x25, 0xCC, 0x75, 0x14, 0xA3, 0x6B, 
	0x44, 0xCC, 0xF6, 0xD7, 0x38, 0x82, 0x6D, 0x9C, 0xFC, 0xB3, 0x48, 0xD5, 0x23, 0x22, 0x09, 0x27, 
	0xB7, 0xEF, 0xA5, 0x44, 0x7B, 0xE7, 0xEE, 0x5F, 0xC1, 0xFC, 0xB9, 0xF6, 0x5F, 0xFE, 0x3E, 0x5E, 
	0x87, 0x5E, 0xBB, 0x5C, 0x39, 0x19, 0x57, 0x80, 0x30, 0x49, 0x9A, 0x39, 0x9E, 0xC8, 0xC3, 0x2D, 
	0xC7, 0x1D, 0xC7, 0x38, 0x00, 0x32, 0xD3, 0x6B, 0xFD, 0xA3, 0x29, 0xA9, 0xE3, 0x7B, 0xC1, 0xF8, 
	0x56, 0x23, 0x19, 0xA5, 0x8D, 0x4C, 0x2F, 0xF7, 0x71, 0x67, 0xC4, 0xD9, 0x55, 0xAD, 0xCE, 0xCC, 
	0xA0, 0x24, 0x35, 0xAC, 0xEC, 0x33, 0x94, 0x8A, 0xBA, 0x78, 0x3F, 0x7F, 0x36, 0xC5, 0xDE, 0x7F, 
	0x7E, 0xBC, 0x43, 0x42, 0xFE, 0x14, 0xE9, 0xAB, 0xF2, 0xF8, 0x0A, 0xDF, 0x95, 0x89, 0x41, 0x36, 
	0x08, 0x28, 0x75, 0xB7, 0x65, 0x1E, 0x24, 0xFA, 0xD9, 0xD7, 0xCA, 0xC4, 0x88, 0x67, 0x5F, 0xCD, 
	0x4B, 0xAE, 0x57, 0x3F, 0x37, 0x11, 0x1F, 0x54, 0xC4, 0xC3, 0x83, 0xC7, 0x1A, 0x65, 0xEE, 0xBE, 
	0xA0, 0xDB, 0x16, 0x12, 0xB8, 0x75, 0x1D, 0x5B, 0xA0, 0x22, 0x3B, 0x83, 0x44, 0xBC, 0x78, 0x15, 
	0x1F, 0x78, 0x3A, 0x1A, 0x1E, 0x70, 0x4D, 0x48, 0x31, 0x6E, 0x1D, 0x0D, 0xA8, 0xA2, 0xCA, 0xBD, 
	0x97, 0x4C, 0xA2, 0x4A, 0xDD, 0x27, 0x3A, 0x6D, 0xB0, 0x88, 0x94, 0x74, 0xD3, 0xC9, 0x30, 0x2E, 
	0x15, 0x9B, 0xFE, 0x79, 0x9D, 0x2A, 0xFC, 0x9E, 0xFA, 0x46, 0x8C, 0x98, 0x80, 0xD5, 0x16, 0x51, 
	0x0C, 0x3B, 0xC1, 0xFA, 0x27, 0xE4, 0x02, 0x3E, 0x37, 0x2D, 0x01, 0xA7, 0xFD, 0x3B, 0xE5, 0x57, 
	0x6E, 0x35, 0x52, 0xCA, 0xC5, 0xFE, 0x5E, 0xC5, 0x24, 0x86, 0x21, 0x64, 0x50, 0x52, 0x81, 0x10, 
	0x01, 0x37, 0x99, 0xCD, 0xAB, 0xE9, 0xB9, 0xBF, 0x2B, 0xC5, 0x39, 0x27, 0x34, 0xAE, 0x26, 0x6C, 
	0x16, 0x65, 0xAB, 0x3F, 0x4F, 0xD7, 0xC7, 0x5E, 0xA9, 0x1C, 0x23, 0xDB, 0x61, 0xA5, 0xF9, 0xE9, 
	0x4A, 0x9F, 0xA2, 0xDC, 0x89, 0xBA, 0xA9, 0x9B, 0x53, 0x66 };

// Bootstrap/Integral Function (HASH_TABLE_REMOVE - opcode 0x5181): Hash table remove.
#define hash_table_remove_key db4561576e9e5959
#define hash_table_remove_size e7ac78da28a711b2
#define hash_table_remove_crc ade3e5503a6d575b
#define hash_table_remove_data d5e0cbdc0b9545f3
static uint64_t hash_table_remove_key = UINT64_C(0x728F199AB6AB1A70);
static uint64_t hash_table_remove_size = UINT64_C(0x1B3);
static uint64_t hash_table_remove_crc = UINT64_C(0x15E08D530301178C);
static uint8_t hash_table_remove_data[] = {
	0x68, 0x79, 0x8F, 0x5B, 0x03, 0x11, 0x0C, 0x91, 0xD7, 0xCE, 0x99, 0x99, 0x0A, 0xF3, 0x03, 0x17, 0x46, 
	0xE6, 0xF6, 0x8B, 0x5C, 0x88, 0xBA, 0xE8, 0x61, 0x84, 0x8E, 0xBB, 0xFC, 0x4F, 0x72, 0x4E, 0xB3, 
	0x1B, 0x2B, 0xAF, 0x59, 0x28, 0xDF, 0xD5, 0xDC, 0xF7, 0x83, 0xC1, 0x2E, 0x09, 0x38, 0x77, 0x43, 
	0xF0, 0xDF, 0x7A, 0x3D, 0x03, 0x85, 0x1E, 0x1D, 0x87, 0xEE, 0x7E, 0xE7, 0x09, 0xC1, 0x55, 0x80, 
	0x8B, 0x96, 0xAC, 0x65, 0x02, 0xE7, 0x81, 0x2C, 0x29, 0xAE, 0xE0, 0x48, 0xF6, 0x74, 0x55, 0xD8, 
	0x9F, 0x85, 0xDA, 0x81, 0x56, 0xC9, 0x8E, 0xE3, 0x5D, 0x57, 0xA9, 0xCF, 0xF0, 0x1B, 0x9D, 0x32, 
	0x23, 0xD4, 0x3A, 0xA3, 0x0B, 0x9B, 0x0D, 0xE1, 0x06, 0xBC, 0x91, 0x6B, 0xE6, 0xB4, 0xD3, 0xFC, 
	0xE5, 0x89, 0x3E, 0xCA, 0xC1, 0x40, 0x59, 0xA5, 0x30, 0x79, 0x7F, 0x23, 0x2C, 0x9F, 0xFF, 0xE9, 
	0x97, 0x1A, 0xDE, 0x4A, 0x8E, 0x38, 0x81, 0x74, 0x7C, 0xC4, 0xDC, 0x7C, 0xE6, 0xFB, 0x05, 0x00, 
	0x6A, 0x7D, 0x0C, 0x34, 0x93, 0xBE, 0x27, 0x7A, 0x7E, 0xB3, 0x0E, 0x13, 0x69, 0xE6, 0xDF, 0x03, 
	0x24, 0xD7, 0xEE, 0x74, 0xEF, 0x1D, 0xB8, 0x1F, 0x7B, 0x97, 0x44, 0xD0, 0x8B, 0xEA, 0x7C, 0xCE, 
	0x0C, 0x45, 0xD5, 0x2A, 0xAF, 0xCE, 0x30, 0x6E, 0x1C, 0xAC, 0x33, 0x71, 0xBF, 0x66, 0x97, 0xB8, 
	0xF2, 0xA8, 0x1D, 0x7B, 0xD8, 0xA4, 0x63, 0xAD, 0x71, 0x8E, 0xAD, 0x01, 0xB9, 0x7E, 0x6C, 0x87, 
	0x1B, 0xB4, 0x08, 0x2D, 0x68, 0xB9, 0xB5, 0x49, 0xB4, 0x78, 0x42, 0x1C, 0x51, 0x44, 0xDA, 0xAF, 
	0x0C, 0x63, 0xFC, 0xBB, 0x1B, 0xC3, 0x46, 0x8D, 0xBF, 0x3C, 0xB3, 0x82, 0xC7, 0x99, 0xF8, 0x86, 
	0xCB, 0xB7, 0x73, 0xC8, 0x4E, 0xFC, 0x62, 0xB0, 0x8E, 0xA8, 0x33, 0xAF, 0x5A, 0x89, 0xE5, 0x2C, 
	0x47, 0x6F, 0x73, 0x02, 0x4D, 0xFB, 0x33, 0xEF, 0x85, 0x3D, 0xAC, 0x09, 0x09, 0x43, 0x59, 0x2F, 
	0x95, 0x52, 0xC0, 0x52, 0x09, 0x02, 0x3E, 0x3F, 0xCA, 0x7B, 0xD9, 0x9D, 0xA5, 0x6D, 0x71, 0x1B, 
	0x55, 0x03, 0x51, 0x3C, 0x07, 0x3A, 0x07, 0x9A, 0x60, 0xAB, 0xE5, 0x90, 0x8F, 0x34, 0x12, 0x0B, 
	0x45, 0xEE, 0xAF, 0xCC, 0x8B, 0x33, 0xCB, 0x47, 0x7B, 0x75, 0xA9, 0xAC, 0xB8, 0xD8, 0xEA, 0xD0, 
	0xC3, 0xC4, 0x34, 0xFD, 0xD2, 0xAB, 0x8A, 0x50, 0x69, 0x4F, 0x2B, 0x69, 0x8D, 0xDD, 0xB2, 0xA2, 
	0x86, 0x32, 0x03, 0x4A, 0xA3, 0xA4, 0x70, 0x9D, 0x80, 0xCB, 0x4B, 0xF8, 0xC2, 0x6A, 0x36, 0x18, 
	0xB6, 0x3E, 0xD9, 0x89, 0xC8, 0x8D, 0xB8, 0xBB, 0x98, 0x53, 0x7F, 0xD7, 0x2A, 0xE8, 0xFE, 0x84, 
	0xB6, 0xAD, 0x98, 0xD4, 0x7A, 0xF3, 0xFC, 0xE3, 0x8D, 0x6D, 0xCF, 0x39, 0xB5, 0x36, 0x1D, 0x3B, 
	0xCE, 0x26, 0xA8, 0xB0, 0x87, 0x6D, 0xF2, 0x82, 0xB5, 0x42, 0x5F, 0xEB, 0x21, 0xA1, 0x9C, 0x53, 
	0xEA, 0x01, 0xCA, 0x38, 0x53, 0xAA, 0x43, 0x8A, 0x67, 0x0F, 0x3F, 0x8E, 0xFF, 0x28, 0x4A, 0xD1, 
	0xC5, 0xD0, 0x20, 0x90, 0x57, 0x50, 0x06, 0x2B, 0x29, 0xB8, 0xD3, 0xEE, 0xC8, 0x16, 0x1D, 0x5C, 
	0xDA, 0xA9 };

// Bootstrap/Integral Function (HASH_TABLE_INSERT - opcode 0xE949): Hash table insert.
#define hash_table_insert_key c2422f407ad12bb4
#define hash_table_insert_size e2e99a9243a9e60e
#define hash_table_insert_crc e8e5aaded90c3395
#define hash_table_insert_data f11dcb0abd071847
static uint64_t hash_table_insert_key = UINT64_C(0xE0C802492111E730);
static uint64_t hash_table_insert_size = UINT64_C(0x84D);
static uint64_t hash_table_insert_crc = UINT64_C(0xB7768F75031A67AE);
static uint8_t hash_table_insert_data[] = {
	0xA0, 0x72, 0x9E, 0xE2, 0x5A, 0x8F, 0x96, 0x2B, 0xAB, 0xC3, 0x6A, 0x72, 0xAE, 0x48, 0xA9, 0x5A, 0x7A, 
	0xEF, 0xFF, 0x2E, 0x1C, 0xCB, 0xC8, 0x4E, 0xDF, 0x91, 0x78, 0x8A, 0x08, 0x36, 0x31, 0x8D, 0x09, 
	0x3A, 0x33, 0xA2, 0x2C, 0xAC, 0x0F, 0xA0, 0xB7, 0x65, 0xDE, 0x25, 0x39, 0x17, 0x41, 0xC8, 0xE2, 
	0x3A, 0x38, 0x60, 0x09, 0xA8, 0x6D, 0xEE, 0xBA, 0x44, 0x0F, 0x56, 0xD4, 0x38, 0x19, 0xAF, 0x44, 
	0x7F, 0x89, 0xC8, 0x5F, 0x6C, 0x81, 0x26, 0xCC, 0x54, 0x3B, 0x2A, 0x2E, 0xAE, 0xF2, 0x97, 0x36, 
	0xDF, 0x1B, 0x33, 0x7F, 0x13, 0x04, 0x13, 0x5F, 0xE6, 0xB4, 0x9D, 0x91, 0x16, 0x20, 0x33, 0xD0, 
	0xF4, 0x1E, 0x8D, 0x86, 0x04, 0x42, 0x51, 0x45, 0xD5, 0xFB, 0x17, 0xF3, 0x06, 0xE7, 0x4E, 0x90, 
	0xC4, 0x61, 0xE8, 0xB7, 0xFE, 0xC9, 0xF3, 0x29, 0x34, 0x42, 0x6F, 0x64, 0xB8, 0xC5, 0x0D, 0xD2, 
	0x18, 0xBD, 0x00, 0xC9, 0x51, 0x6F, 0xF9, 0xB9, 0x45, 0x56, 0x65, 0x17, 0x12, 0x65, 0x58, 0xFF, 
	0x90, 0xAA, 0x10, 0x18, 0x7F, 0xFE, 0xA2, 0x9A, 0x46, 0xE4, 0xCD, 0x4F, 0xB6, 0x63, 0x6F, 0x06, 
	0xC9, 0xB4, 0xDD, 0x53, 0x9B, 0x83, 0x5D, 0xD7, 0x65, 0xAC, 0x4B, 0xC0, 0x9D, 0x6E, 0x62, 0xF1, 
	0x29, 0xE9, 0xDD, 0x9E, 0x02, 0x70, 0xE2, 0xB6, 0x33, 0xFD, 0x7D, 0xC0, 0x02, 0x71, 0xCA, 0x18, 
	0x3E, 0xC9, 0x9D, 0xD7, 0x9B, 0x00, 0x0E, 0xB6, 0xED, 0x2D, 0xC0, 0xC7, 0xD5, 0x30, 0xC6, 0x97, 
	0x17, 0xDC, 0x2F, 0xA8, 0x0C, 0x7A, 0xD0, 0xC1, 0xAD, 0xD2, 0xC8, 0xCE, 0x3D, 0x1F, 0x05, 0x17, 
	0x28, 0x93, 0xDA, 0xE0, 0xE0, 0xEE, 0x0E, 0xE6, 0x4F, 0xEC, 0xCA, 0x65, 0xF1, 0xA1, 0xF5, 0x28, 
	0x64, 0xA9, 0x15, 0x74, 0x5E, 0xA3, 0x39, 0xE1, 0xE3, 0xA6, 0xF6, 0x3A, 0xC2, 0xD9, 0xB6, 0xD7, 
	0xA7, 0xCF, 0xA1, 0xDD, 0x9D, 0x65, 0xF4, 0x03, 0x9E, 0x5D, 0x95, 0x4D, 0x1E, 0x36, 0x15, 0x44, 
	0xF5, 0x42, 0x0B, 0x3F, 0xBE, 0xF5, 0x46, 0xAF, 0x55, 0x82, 0xA7, 0xCA, 0x3F, 0xA3, 0x73, 0x7D, 
	0x06, 0x69, 0xE6, 0xAC, 0xA4, 0xFD, 0x7A, 0x67, 0xC3, 0xDB, 0x2D, 0x01, 0x5A, 0x79, 0x59, 0x5D, 
	0x61, 0x59, 0x3E, 0x0F, 0x46, 0xAE, 0x6C, 0x4A, 0xEC, 0x28, 0x8E, 0x57, 0xAC, 0x53, 0x89, 0x39, 
	0x2C, 0x21, 0x2B, 0x54, 0xBD, 0x17, 0xF5, 0x3B, 0xDF, 0xCA, 0x5F, 0x95, 0xE3, 0x81, 0x71, 0x8F, 
	0xA0, 0x92, 0x80, 0x0D, 0x1A, 0x5B, 0xF2, 0xFF, 0x0A, 0x4F, 0x1B, 0x1D, 0xAF, 0x1E, 0xC9, 0x40, 
	0xEB, 0x3B, 0xC9, 0x66, 0x80, 0xE5, 0x10, 0x0F, 0xB1, 0x7C, 0x67, 0xA4, 0xB3, 0xCD, 0x45, 0x59, 
	0xCE, 0xC5, 0x7D, 0xAA, 0x0C, 0x58, 0xFF, 0xA2, 0x32, 0xEC, 0x1A, 0x46, 0x14, 0x93, 0x44, 0x4A, 
	0x96, 0xD5, 0xF1, 0x88, 0x42, 0xBA, 0x66, 0x99, 0xF0, 0x72, 0x32, 0xE2, 0x53, 0x4A, 0x41, 0x5B, 
	0xF9, 0xE3, 0x8A, 0x17, 0x10, 0x44, 0x2D, 0x14, 0x2D, 0x88, 0xCB, 0x08, 0xD3, 0x09, 0x1D, 0x84, 
	0x26, 0xF4, 0xF5, 0x41, 0x15, 0xB5, 0x6D, 0x61, 0x1B, 0xD9, 0xA7, 0x6C, 0xBC, 0xD3, 0x30, 0x1A, 
	0x20, 0xF9, 0xDC, 0x7B, 0xE0, 0xF6, 0xEB, 0xA7, 0x2B, 0x61, 0x12, 0x4A, 0x16, 0x8E, 0xEB, 0x94, 
	0xE6, 0x85, 0xB2, 0x84, 0x63, 0x0C, 0x9C, 0xEF, 0x5F, 0xC6, 0xE7, 0xDB, 0x9F, 0x05, 0x43, 0x2C, 
	0xD2, 0xE0, 0xE3, 0x76, 0x7C, 0xCF, 0xC8, 0xBF, 0x83, 0x6D, 0xDF, 0x44, 0xE4, 0xA0, 0x22, 0xE1, 
	0xCD, 0x28, 0x75, 0x58, 0xEB, 0xAB, 0x9E, 0xD3, 0xB6, 0x17, 0xE1, 0xC3, 0x88, 0x74, 0x7F, 0x61, 
	0xEE, 0x77, 0xD1, 0xE4, 0xF3, 0xB1, 0x12, 0x42, 0x30, 0x5D, 0xC9, 0xFF, 0x71, 0x88, 0x8B, 0x27, 
	0x93, 0xB2, 0x0C, 0x88, 0x1C, 0x61, 0xD4, 0x78, 0xF1, 0x80, 0x0A, 0x7A, 0x94, 0x3B, 0xE0, 0x0A, 
	0x71, 0x6B, 0xF8, 0xD3, 0x28, 0xBB, 0x70, 0x91, 0xF7, 0xA8, 0x74, 0xFD, 0xA0, 0x75, 0x4D, 0xA8, 
	0xFF, 0x77, 0x77, 0x33, 0x53, 0x13, 0xB5, 0x20, 0x86, 0x8A, 0x40, 0xF7, 0xB1, 0x97, 0x32, 0x62, 
	0x5F, 0x42, 0x8D, 0x54, 0x7C, 0xAA, 0x40, 0xEC, 0x0E, 0x4A, 0x40, 0xE1, 0x14, 0xAB, 0x0D, 0xBF, 
	0x1E, 0xD3, 0xE4, 0x29, 0x74, 0xC6, 0x47, 0x15, 0xD9, 0xA4, 0xC3, 0x5C, 0xFF, 0x5E, 0x6D, 0x4F, 
	0x11, 0x3E, 0x8A, 0xF6, 0xD7, 0x0A, 0xEC, 0x14, 0x95, 0xE9, 0xB4, 0x11, 0x02, 0xDE, 0xF9, 0x78, 
	0xFF, 0x6A, 0xAC, 0x49, 0x1E, 0x77, 0x36, 0x0D, 0xAA, 0x8A, 0xE4, 0xC4, 0xB6, 0x2F, 0x81, 0x84, 
	0xC4, 0xB5, 0x06, 0xCB, 0x90, 0xEA, 0x8D, 0x8C, 0x43, 0x00, 0x94, 0x06, 0x4D, 0x49, 0x5B, 0x11, 
	0x87, 0xFD, 0x5F, 0x8A, 0x62, 0xD4, 0xF5, 0xC8, 0x67, 0xB3, 0xF4, 0xF9, 0xA6, 0xBF, 0x25, 0x49, 
	0x15, 0x98, 0xB9, 0x6C, 0x1A, 0x96, 0x4F, 0x0F, 0x9C, 0x4A, 0x9E, 0xC0, 0x07, 0x6B, 0x9F, 0xC7, 
	0x1E, 0x47, 0x7E, 0xE6, 0x1A, 0xD5, 0xA6, 0x4D, 0xF3, 0xB2, 0x3C, 0x93, 0x24, 0xA1, 0x99, 0x40, 
	0xE0, 0x5E, 0x9B, 0xEF, 0x04, 0x52, 0x99, 0x5C, 0x41, 0xF9, 0x2F, 0xAC, 0xA7, 0x08, 0xF7, 0x72, 
	0x91, 0x9F, 0x45, 0x73, 0x1E, 0xE2, 0xD7, 0x04, 0x93, 0x25, 0x37, 0x03, 0x50, 0xD8, 0x3E, 0x0B, 
	0x4E, 0xFA, 0x80, 0xA8, 0xE4, 0xF7, 0xD9, 0x69, 0xC7, 0x5F, 0xC5, 0xBE, 0xB1, 0x6C, 0x15, 0x7A, 
	0x97, 0xC5, 0xAE, 0x59, 0x5C, 0xBA, 0x1A, 0x6E, 0x21, 0x98, 0xD5, 0x73, 0xF1, 0x72, 0xCF, 0x45, 
	0x50, 0x56, 0x97, 0xDF, 0xF7, 0xDB, 0x49, 0x8A, 0xD0, 0x35, 0xA9, 0x50, 0xBC, 0x0A, 0xC3, 0x1E, 
	0x82, 0x88, 0x5B, 0x5D, 0x9F, 0x70, 0xF5, 0x11, 0xDD, 0xAD, 0xA1, 0x13, 0xEE, 0x25, 0x93, 0x2B, 
	0x9E, 0xAB, 0xBA, 0xA3, 0xE2, 0x53, 0x31, 0xDE, 0x3B, 0x78, 0xFA, 0x19, 0xB8, 0xA6, 0x23, 0x80, 
	0xB9, 0xA2, 0xBA, 0xC8, 0x1F, 0x35, 0x08, 0x6A, 0x73, 0x41, 0x16, 0xF5, 0xEA, 0x8E, 0x7F, 0x79, 
	0xD2, 0x08, 0x81, 0x53, 0xB4, 0x88, 0xA5, 0xD6, 0x3B, 0x99, 0x75, 0x89, 0x86, 0x9F, 0x97, 0xBE, 
	0xF7, 0x89, 0xD8, 0x47, 0x01, 0xED, 0x70, 0x07, 0x4C, 0x61, 0xB8, 0xF8, 0x83, 0xBA, 0x56, 0x99, 
	0x62, 0xEB, 0x41, 0x39, 0x1F, 0x4C, 0x49, 0x41, 0x6C, 0xA2, 0x6D, 0xDB, 0x6F, 0xDF, 0xA7, 0xF3, 
	0x69, 0x9C, 0x46, 0x1C, 0x6B, 0xCB, 0xA3, 0x09, 0xA2, 0xC0, 0x84, 0x33, 0x07, 0x90, 0xB5, 0x4A, 
	0x08, 0x22, 0x8F, 0x15, 0xD2, 0x64, 0x01, 0x7C, 0x67, 0x2A, 0xF6, 0x1D, 0xD6, 0x0B, 0x04, 0x04, 
	0x5E, 0x8E, 0xD4, 0xF8, 0xA4, 0x6F, 0xD1, 0x4E, 0x52, 0x85, 0x20, 0xDA, 0xCE, 0x4D, 0x08, 0x4F, 
	0xD2, 0xBD, 0x44, 0xA3, 0xB1, 0x8B, 0x73, 0x5D, 0xEF, 0x61, 0xD3, 0x32, 0xAB, 0x36, 0xAE, 0x9E, 
	0x91, 0x3C, 0x5F, 0x65, 0xE2, 0xA8, 0x68, 0x7F, 0x73, 0x09, 0x3D, 0x73, 0xA6, 0x2F, 0xE8, 0x12, 
	0x13, 0x9E, 0x2E, 0x6C, 0x10, 0xFD, 0xCE, 0x44, 0xA9, 0x3A, 0xAB, 0x13, 0x21, 0xED, 0x3E, 0x44, 
	0xB1, 0x5A, 0xAD, 0x55, 0x8F, 0x4D, 0x04, 0x1B, 0x15, 0xAD, 0xF4, 0xC0, 0xE9, 0xE1, 0x14, 0x9B, 
	0x6F, 0xD0, 0x42, 0x18, 0x85, 0xAB, 0xA2, 0xF0, 0xC3, 0xF8, 0xA9, 0xD5, 0x52, 0x54, 0x71, 0x03, 
	0x22, 0xBE, 0xE6, 0x17, 0x3C, 0x5A, 0xF6, 0x84, 0x4B, 0xC4, 0x95, 0x19, 0x0C, 0xF0, 0x03, 0xD6, 
	0xB2, 0x23, 0x2F, 0x56, 0xB0, 0x4D, 0xEA, 0xF5, 0x67, 0x27, 0x26, 0x12, 0x5F, 0xBA, 0xFC, 0x62, 
	0x84, 0x1E, 0xC6, 0xDC, 0x5E, 0x80, 0xB1, 0xA6, 0x98, 0x81, 0xDE, 0x0E, 0xFA, 0x48, 0x2C, 0xA7, 
	0x2F, 0x55, 0xBA, 0x56, 0x7A, 0x09, 0x82, 0xC2, 0xA9, 0x67, 0x24, 0x3E, 0xEB, 0xF1, 0x98, 0xB6, 
	0xB1, 0x62, 0xA1, 0x8B, 0x1E, 0x25, 0x31, 0x4E, 0xDB, 0xD4, 0x34, 0x21, 0x9A, 0x3F, 0xB6, 0x71, 
	0x44, 0xE2, 0x5C, 0x33, 0xBD, 0x45, 0x68, 0x5A, 0x30, 0x22, 0x3D, 0xA1, 0xE7, 0xA1, 0xCB, 0xC5, 
	0x9C, 0xEC, 0xE2, 0x9A, 0xC5, 0x8B, 0x50, 0x4E, 0x9B, 0x82, 0xB0, 0x6B, 0xAB, 0x8D, 0x4D, 0xF7, 
	0x19, 0x17, 0xD9, 0x9C, 0x2E, 0x1B, 0x02, 0xC9, 0xA8, 0x83, 0xBD, 0x54, 0x48, 0x38, 0xD8, 0x6F, 
	0x08, 0x6B, 0x1F, 0xB3, 0xA9, 0xF0, 0x12, 0x3A, 0x90, 0x4F, 0x77, 0x5B, 0xA0, 0x46, 0x55, 0xE4, 
	0x3E, 0x9F, 0x8A, 0xEF, 0xB5, 0xD7, 0x49, 0xF0, 0xCE, 0xB9, 0x46, 0x0B, 0x38, 0x50, 0x6A, 0x0D, 
	0xC1, 0xBE, 0x26, 0xD7, 0x68, 0x18, 0xA9, 0x73, 0xAA, 0x19, 0xA6, 0xEA, 0x30, 0xA2, 0xDD, 0x01, 
	0x0A, 0xC5, 0x8E, 0xA5, 0xC9, 0x9A, 0x5B, 0xD0, 0xC0, 0x0B, 0xD3, 0x4D, 0x0B, 0xFC, 0x0B, 0xB5, 
	0x18, 0xA2, 0xAB, 0x7C, 0xAA, 0x9A, 0x9D, 0x6D, 0x03, 0x2A, 0x0A, 0xE8, 0x7A, 0x8A, 0xDC, 0x30, 
	0x76, 0x50, 0xF0, 0x96, 0xF3, 0x9E, 0x13, 0x11, 0x0B, 0xB5, 0x04, 0x5C, 0x27, 0xE2, 0x44, 0x78, 
	0xF7, 0xAC, 0xE3, 0x67, 0x70, 0xD4, 0x7D, 0x43, 0x74, 0x18, 0xDB, 0x16, 0x28, 0xBD, 0x92, 0x27, 
	0xB8, 0xBA, 0x51, 0x9E, 0x90, 0x02, 0x4B, 0x45, 0x42, 0x4B, 0xE9, 0x7C, 0x65, 0xFA, 0xB3, 0x61, 
	0x4B, 0x47, 0x96, 0xCC, 0xAC, 0x71, 0x1C, 0x45, 0xD1, 0x7D, 0xF2, 0xC5, 0x0A, 0x5E, 0x6E, 0xEF, 
	0x41, 0xAE, 0x81, 0x63, 0x21, 0x61, 0x83, 0x51, 0x47, 0x43, 0x93, 0xE9, 0x97, 0xFA, 0x2A, 0x25, 
	0xC6, 0x35, 0xAE, 0x4B, 0x12, 0xEF, 0x05, 0x63, 0xDA, 0x15, 0x86, 0xC8, 0x18, 0x28, 0xA0, 0xFC, 
	0xF3, 0x46, 0x1B, 0x4A, 0x73, 0x2E, 0xAC, 0x9B, 0x40, 0xD4, 0x78, 0x84, 0xA4, 0xDD, 0x7F, 0x73, 
	0x39, 0x8D, 0x54, 0x7E, 0xC4, 0xAB, 0x58, 0xFF, 0x59, 0x15, 0xAE, 0xAF, 0x03, 0xA8, 0x04, 0x47, 
	0x15, 0x74, 0xC4, 0xA2, 0x46, 0x52, 0x9A, 0xD3, 0xD4, 0x11, 0x9F, 0x85, 0xC9, 0xF2, 0xD9, 0x02, 
	0x5E, 0x63, 0x68, 0x84, 0x1B, 0x7C, 0x38, 0xB3, 0x19, 0x7D, 0xC4, 0x40, 0xCD, 0x28, 0xBA, 0xF2, 
	0x4E, 0x3D, 0xA3, 0x40, 0xFE, 0x48, 0xC4, 0xDE, 0x0B, 0xBE, 0x8B, 0x5E, 0xC2, 0x21, 0x27, 0x18, 
	0x73, 0x4E, 0xCC, 0xF8, 0x45, 0x57, 0xB7, 0x2F, 0xA7, 0xE7, 0x4C, 0x5C, 0x26, 0x2D, 0xD0, 0xB2, 
	0xA4, 0x76, 0x6E, 0x34, 0x89, 0xB1, 0x4C, 0x24, 0x8B, 0xA8, 0xA1, 0x99, 0xD1, 0x69, 0x20, 0x3D, 
	0x11, 0xD5, 0x9A, 0x90, 0x69, 0x54, 0xDA, 0x5A, 0xF7, 0x04, 0x15, 0x3C, 0xD9, 0xD4, 0xB6, 0xC3, 
	0x7A, 0x73, 0x3F, 0xE8, 0x23, 0xC1, 0x91, 0x52, 0xAE, 0x83, 0x69, 0x2F, 0x24, 0x9A, 0xA6, 0x91, 
	0x34, 0x07, 0x0B, 0x3F, 0xEF, 0xF5, 0xC0, 0xF4, 0x92, 0x31, 0x15, 0x51, 0x41, 0x15, 0x94, 0x0A, 
	0x08, 0x75, 0x18, 0xAE, 0xF4, 0x46, 0x99, 0xF1, 0x23, 0x0A, 0xFF, 0x26, 0x8A, 0x32, 0xEF, 0xE7, 
	0xB4, 0xB5, 0xF2, 0xDB, 0xBB, 0x67, 0x66, 0x09, 0x48, 0xF9, 0x5D, 0xE6, 0x6D, 0x08, 0x1A, 0xE3, 
	0x97, 0x88, 0xB4, 0x4B, 0xEB, 0xA2, 0xFA, 0x27, 0xB5, 0x3D, 0xD3, 0xD3, 0xCA, 0xAF, 0x51, 0xAA, 
	0x4B, 0xED, 0x2B, 0x9C, 0x4F, 0x4A, 0x4E, 0xF6, 0x92, 0x90, 0xE4, 0x4C, 0xC3, 0xBA, 0xCD, 0xBA, 
	0xCD, 0x78, 0x1D, 0xBE, 0x60, 0x66, 0x5D, 0x21, 0x61, 0xCE, 0x3F, 0x78, 0xFF, 0x87, 0x1C, 0x42, 
	0x2B, 0x69, 0x9B, 0x80, 0xEA, 0xD8, 0xD4, 0xBE, 0xA8, 0x32, 0xE7, 0xA9, 0xB6, 0xC5, 0x2C, 0x22, 
	0xCC, 0x6E, 0xD6, 0xAE, 0x34, 0xFE, 0xFC, 0xDC, 0xFD, 0xAC, 0xB9, 0x5B, 0x73, 0x97, 0xAA, 0xE1, 
	0xFF, 0x83, 0xB2, 0xC6, 0xA7, 0xF4, 0x14, 0x8D, 0xED, 0x1D, 0x44, 0xB0, 0x70, 0x0D, 0xE6, 0x8A, 
	0xD1, 0x99, 0x9C, 0xED, 0xCD, 0xAD, 0x66, 0x5F, 0xF8, 0xD3, 0xE0, 0x73, 0x02, 0x1D, 0xF7, 0x8F, 
	0xC2, 0xC6, 0x12, 0x6B, 0xED, 0x73, 0x06, 0x57, 0x6C, 0xDA, 0xBC, 0x19, 0xA6, 0xBC, 0xB5, 0x9E, 
	0x87, 0x04, 0xAE, 0x37, 0xF5, 0x99, 0xD0, 0x4B, 0xB8, 0xF3, 0x36, 0x70, 0xDE, 0xEC, 0x82, 0xD5, 
	0x70, 0xF2, 0xDF, 0x2F, 0x69, 0x73, 0xF1, 0x99, 0x53, 0x24, 0x0A, 0x2C, 0x74, 0x55, 0x08, 0xAF, 
	0x84, 0x90, 0x07, 0x16, 0x61, 0xE6, 0x3B, 0x26, 0x96, 0xC2, 0x38, 0x43, 0x69, 0x4E, 0x71, 0x9E, 
	0x72, 0x5C, 0xCE, 0x28, 0x6C, 0x63, 0xD7, 0x13, 0x8D, 0x15, 0x8F, 0x52, 0xCC, 0x5C, 0xED, 0xE6, 
	0x01, 0xC4, 0xF7, 0x19, 0xAB, 0xC1, 0x9D, 0xF8, 0xEC, 0x1C, 0x54, 0x2E, 0xF0, 0x03, 0x7E, 0x59, 
	0x42, 0x8D, 0x4B, 0x09, 0xC9, 0x6B, 0x0A, 0x3C, 0xFD, 0x09, 0x24, 0x9A, 0xF0, 0xCC, 0x4E, 0xC7, 
	0x44, 0xF2, 0xB4, 0x80, 0xA5, 0x7B, 0x9D, 0x39, 0x05, 0xAA, 0x28, 0xB0, 0x64, 0xF2, 0x09, 0x2A, 
	0x18, 0x0C, 0xDB, 0x23, 0xDD, 0xE7, 0x50, 0xAB, 0xB4, 0xC5, 0xA1, 0x47, 0xA1, 0x65, 0x1F, 0x79, 
	0xA9, 0xB0, 0x11, 0xBC, 0xE8, 0x68, 0x84, 0x5C, 0x7E, 0x59, 0x08, 0x44, 0xF6, 0xA2, 0x44, 0x80, 
	0xD0, 0xB0, 0x3E, 0x18, 0xD5, 0x8B, 0x9B, 0xE8, 0x91, 0x87, 0xDD, 0xEA, 0xA1, 0x70, 0xC7, 0x37, 
	0x26, 0xC4, 0xF7, 0x39, 0xF2, 0x68, 0xBE, 0xF0, 0x93, 0x61, 0xC0, 0xAF, 0x9D, 0xF2, 0xFC, 0xB4, 
	0x7C, 0x49, 0x30, 0xEC, 0x90, 0xFE, 0xC7, 0xE8, 0xE7, 0x13, 0xC8, 0x64, 0xAD, 0x75, 0x0F, 0x91, 
	0x80, 0x90, 0xA6, 0x5F, 0x92, 0x6D, 0x97, 0xC0, 0x63, 0xDA, 0x5B, 0xFF, 0x52, 0xA8, 0x3F, 0x43, 
	0xC6, 0xF3, 0xBD, 0x5A, 0x8F, 0x4E, 0x9C, 0xD0, 0x31, 0xBF, 0x52, 0x25, 0x97, 0x41, 0x70, 0xAE, 
	0x1D, 0x38, 0x45, 0x2D, 0xFF, 0x42, 0x11, 0x45, 0x4C, 0x82, 0x4F, 0xFA, 0x7A, 0xFC, 0xF7, 0x95, 
	0x0A, 0x67, 0xAA, 0x6C, 0x39, 0xED, 0xDF, 0xC8, 0x9B, 0x39, 0x63, 0xEA, 0xCB, 0xC2, 0x96, 0x27, 
	0xF6, 0x16, 0x3C, 0x7C, 0x1E, 0xC7, 0x66, 0x80, 0x57, 0x18, 0xD5, 0xBD, 0xA4, 0xCD, 0xA3, 0x6C, 
	0xA0, 0x81, 0xD1, 0x8F, 0x60, 0x9D, 0x8B, 0x69, 0x2A, 0x8A, 0xAA, 0x09, 0x30, 0x16, 0xB7, 0x0F, 
	0x65, 0xFB, 0x61, 0x0F, 0x5D, 0xF7, 0x40, 0xBA, 0xB0, 0x5A, 0x3A, 0x97, 0x8E, 0xBC, 0x09, 0x58, 
	0x46, 0xB6, 0x06, 0x08, 0x05, 0x33, 0xFE, 0xC5, 0x34, 0xF5, 0x54, 0x7C, 0xB2, 0xBB, 0x70, 0x0D, 
	0x4C, 0x7B, 0x93, 0xC4, 0xA5, 0xD5, 0x31, 0x8C, 0x21, 0x5D, 0xAB, 0x39, 0x32, 0xDD, 0x4D, 0x6C, 
	0x97, 0xE4, 0xC6, 0x34, 0x8E, 0xB0, 0xAE, 0x31, 0x47, 0x18, 0x8B, 0xF2, 0xDD, 0x12, 0x74, 0x30, 
	0xE2, 0x86, 0xEB, 0xE4, 0xC4, 0x7B, 0x64, 0x0A, 0x89, 0x0C, 0xE4, 0xA4, 0x39, 0x2E, 0x5E, 0xCB, 
	0x5F, 0x4B, 0xF9, 0xF5, 0xDA, 0xBE, 0xB9, 0x4C, 0x4F, 0xBF, 0x42, 0x94, 0x19, 0x48, 0x52, 0x6F, 
	0x64, 0xE6, 0x7C, 0x11, 0x40, 0x04, 0x1C, 0xE0, 0x9F, 0x73, 0xDE, 0x8B, 0xDF, 0xB9, 0x70, 0xFA, 
	0xFE, 0x0E, 0xC2, 0x57, 0x49, 0x14, 0x95, 0x87, 0x4C, 0x88, 0x4E, 0xEC, 0xB4, 0x53, 0x35, 0xFC, 
	0x8C, 0x01, 0xE4, 0x00, 0x28, 0xC8, 0xBD, 0x0A, 0xD4, 0x91, 0x2B, 0xC5, 0xE3, 0xFD, 0xF0, 0x2D, 
	0x9A, 0xF7, 0xD2, 0x1D, 0x69, 0x4F, 0xED, 0xF1, 0x0F, 0x6B, 0xCB, 0xE8, 0x0C, 0x4A, 0x36, 0x9F, 
	0xD8, 0xB6, 0xA3, 0xB0, 0x0D, 0xD9, 0xCE, 0xA9, 0xF3, 0x38, 0xEC, 0xDB, 0xE0, 0x8F, 0xB8, 0xA5, 
	0x15, 0x93, 0xA3, 0x0E, 0x16, 0xFF, 0xDC, 0x50, 0x4C, 0xF2, 0x42, 0x5F, 0x72, 0x16, 0xB8, 0x8A, 
	0xC7, 0xEA, 0x1F, 0x20, 0x91, 0xDE, 0x25, 0x41, 0x2F, 0x24, 0x0E, 0xCC, 0x2A, 0x49, 0xB8, 0x9D, 
	0x0D, 0x51, 0xD5, 0x79, 0x65, 0x02, 0x8D, 0x5B, 0x41, 0xAA, 0x28, 0x47 };

// Bootstrap/Integral Function (HASH_TABLE_REMOVE_AT - opcode 0xC2C1): Hash table remove at.
#define hash_table_remove_at_key cb5383f525b42134
#define hash_table_remove_at_size e22f022ff4f2e39f
#define hash_table_remove_at_crc bcc7eccc18187da4
#define hash_table_remove_at_data f635264f89658030
static uint64_t hash_table_remove_at_key = UINT64_C(0x4A1883971E091BDE);
static uint64_t hash_table_remove_at_size = UINT64_C(0x99);
static uint64_t hash_table_remove_at_crc = UINT64_C(0x99B7CEDB7F403499);
static uint8_t hash_table_remove_at_data[] = {
	0x83, 0xCD, 0xEB, 0xFE, 0x39, 0x5E, 0x6B, 0x42, 0x59, 0xBE, 0xD7, 0xB3, 0xBA, 0xA5, 0x0E, 0xA0, 0x99, 
	0x53, 0xE7, 0x4D, 0xAB, 0x01, 0x26, 0xB1, 0xA4, 0x4A, 0xFF, 0x19, 0xF1, 0x89, 0x52, 0xB1, 0x93, 
	0xAA, 0xD6, 0x26, 0x3D, 0xBA, 0x23, 0x3D, 0xC3, 0x75, 0x57, 0xC0, 0xA5, 0xD7, 0xA2, 0x7D, 0x8C, 
	0x35, 0x58, 0x14, 0x7A, 0xA1, 0x63, 0xB5, 0xAD, 0xEA, 0x02, 0x57, 0x72, 0x9D, 0xE6, 0x06, 0x61, 
	0xD9, 0xB7, 0xCB, 0x08, 0xF8, 0x28, 0xBF, 0x91, 0x0B, 0x5D, 0xCA, 0x8C, 0xAF, 0x76, 0x77, 0x55, 
	0xD4, 0xA7, 0x74, 0x3B, 0x60, 0xF7, 0x80, 0x9B, 0xA4, 0x7B, 0x28, 0xF0, 0x38, 0x81, 0xD3, 0xC7, 
	0xB7, 0x79, 0x16, 0xB0, 0x38, 0xEF, 0x46, 0x2F, 0xA3, 0x94, 0xB4, 0xAF, 0xC3, 0xDC, 0x86, 0x45, 
	0xF7, 0xFF, 0x0D, 0x86, 0x30, 0x99, 0xE6, 0x5F, 0xDC, 0xB4, 0xE6, 0x8B, 0xA8, 0x03, 0x3C, 0x2F, 
	0x06, 0x75, 0x2D, 0x7B, 0x7A, 0x0E, 0x6B, 0xD7, 0x27, 0xC4, 0x42, 0xEC, 0xBF, 0x54, 0x68, 0x67, 
	0x08, 0xF9, 0x58, 0xA4, 0x29, 0x42, 0xF5, 0x1E };

// Bootstrap/Integral Function (HASH_TABLE_EXISTS_AT - opcode 0xC162): Hash table exists at.
#define hash_table_exists_at_key a593f4e1adee1ec3
#define hash_table_exists_at_size f3bf2e79dcdd775c
#define hash_table_exists_at_crc e2d0157f968152c3
#define hash_table_exists_at_data de3460925880db30
static uint64_t hash_table_exists_at_key = UINT64_C(0xD0F8ED8781CDA52B);
static uint64_t hash_table_exists_at_size = UINT64_C(0xB3);
static uint64_t hash_table_exists_at_crc = UINT64_C(0x8E1C063B4A71BB6A);
static uint8_t hash_table_exists_at_data[] = {
	0x97, 0x50, 0xDC, 0x8C, 0x55, 0xAB, 0x31, 0x5F, 0xF4, 0xEB, 0x4B, 0x9E, 0xE7, 0xA8, 0x07, 0x09, 0xFE, 
	0x3D, 0x07, 0xF0, 0xD1, 0x52, 0x8E, 0xF0, 0x5A, 0xAB, 0x99, 0x4D, 0x0F, 0x3C, 0xE8, 0xBE, 0xA6, 
	0x58, 0xAB, 0xB4, 0xD5, 0xDB, 0xE3, 0xF9, 0x6D, 0xE8, 0x13, 0x87, 0x5E, 0xB0, 0xA3, 0xAE, 0xC6, 
	0xD1, 0x10, 0x01, 0x5D, 0xF4, 0x59, 0x79, 0x67, 0xDC, 0xC7, 0x87, 0x7A, 0x83, 0x72, 0x44, 0x23, 
	0xFA, 0x06, 0x74, 0x31, 0xFD, 0x70, 0x5C, 0x03, 0x70, 0x95, 0x71, 0xC3, 0xB3, 0x61, 0x64, 0xE2, 
	0x22, 0xCD, 0xD2, 0x13, 0x9A, 0x55, 0xFC, 0xF5, 0x36, 0x4B, 0x70, 0x5B, 0x0C, 0x73, 0x70, 0x3F, 
	0xE6, 0x95, 0x5C, 0xE3, 0x17, 0x66, 0x16, 0x93, 0x8E, 0x4E, 0x51, 0x87, 0x46, 0x9C, 0x7B, 0x0E, 
	0x10, 0x00, 0x68, 0x60, 0x61, 0x8E, 0xBF, 0xDD, 0xDE, 0x1C, 0xD1, 0xB6, 0xD1, 0x1B, 0x25, 0xA7, 
	0x36, 0xAF, 0xDD, 0x29, 0xFB, 0xFB, 0x63, 0x89, 0x0C, 0x5B, 0xCD, 0x2B, 0x3F, 0x5E, 0x38, 0xC5, 
	0x82, 0x37, 0x79, 0xB6, 0x85, 0xAC, 0xA2, 0xE2, 0xD5, 0x9E, 0x11, 0x36, 0xB6, 0x92, 0x12, 0xC9, 
	0x03, 0xFF, 0xAD, 0x64, 0x50, 0xE9, 0x31, 0xE7, 0x37, 0x64, 0x33, 0xCA, 0x58, 0xC6, 0xC7, 0x20, 
	0xE1, 0x23 };

// Bootstrap/Integral Function (HASH_TABLE_GET_KEY - opcode 0xB844): Hash table get key.
#define hash_table_get_key_key ff94155493332242
#define hash_table_get_key_size a5137b63f733e517
#define hash_table_get_key_crc f9569b6ddceb0ff7
#define hash_table_get_key_data a4135b67a7a12bbd
static uint64_t hash_table_get_key_key = UINT64_C(0x279008A161EE1B76);
static uint64_t hash_table_get_key_size = UINT64_C(0xA5);
static uint64_t hash_table_get_key_crc = UINT64_C(0xE61A169B1F5CC53B);
static uint8_t hash_table_get_key_data[] = {
	0x6D, 0xFC, 0xF4, 0xBF, 0x32, 0xAB, 0x30, 0x74, 0x39, 0xE5, 0x69, 0x8F, 0x58, 0x52, 0xDF, 0xD5, 0xED, 
	0x1B, 0x2C, 0x8D, 0x6C, 0xD7, 0xF4, 0xFC, 0xA1, 0x67, 0x58, 0x08, 0x7C, 0x46, 0x54, 0xFD, 0xAC, 
	0xEF, 0xD4, 0x34, 0x4E, 0xC3, 0x58, 0xE2, 0xBC, 0xA4, 0x50, 0x4B, 0xD1, 0x18, 0x72, 0xD7, 0x86, 
	0x6A, 0x97, 0x87, 0x0F, 0x8A, 0x4F, 0x7B, 0x41, 0x93, 0x1F, 0xA4, 0x27, 0x9C, 0xE1, 0x54, 0x92, 
	0x9E, 0xAF, 0x27, 0x36, 0x8B, 0x07, 0xF7, 0xAE, 0xDA, 0x30, 0x14, 0x34, 0x0E, 0xEF, 0xBA, 0x09, 
	0xC1, 0x5A, 0xD4, 0x03, 0xAE, 0xB4, 0xFD, 0x65, 0x8F, 0x01, 0x59, 0x47, 0x05, 0x59, 0x16, 0x67, 
	0x61, 0xF6, 0x24, 0x20, 0x7A, 0x61, 0x46, 0x6A, 0xAD, 0x13, 0x7D, 0x84, 0xAC, 0xBB, 0x72, 0x9F, 
	0xE8, 0x61, 0xD1, 0x67, 0x81, 0xBA, 0x66, 0xAC, 0x2F, 0x75, 0x9E, 0xAA, 0x81, 0x5F, 0x91, 0x59, 
	0x7B, 0x45, 0xA5, 0x18, 0xDD, 0x48, 0xA6, 0x83, 0x49, 0xA0, 0xD9, 0xA4, 0xC5, 0xAE, 0xC9, 0x26, 
	0x18, 0x0F, 0xA1, 0x7D, 0x5A, 0x86, 0xCB, 0x06, 0x01, 0xC5, 0x37, 0x49, 0xC2, 0xEC, 0x40, 0xDB, 
	0x4A, 0x27, 0xAA, 0xC7 };

// Bootstrap/Integral Function (HASH_TABLE_GET_VALUE - opcode 0xEFBA): Hash table get value.
#define hash_table_get_value_key cf4b7e34a7f92df2
#define hash_table_get_value_size c74cc74ce884f72e
#define hash_table_get_value_crc a614b9045cfc79b8
#define hash_table_get_value_data c21eef4862f546ba
static uint64_t hash_table_get_value_key = UINT64_C(0xC13D639E48DC848A);
static uint64_t hash_table_get_value_size = UINT64_C(0xA5);
static uint64_t hash_table_get_value_crc = UINT64_C(0xA37A80776A7FFFA1);
static uint8_t hash_table_get_value_data[] = {
	0x35, 0x0F, 0x7A, 0x88, 0x6C, 0x99, 0x55, 0xA7, 0x9C, 0x16, 0x78, 0x9D, 0x36, 0xFA, 0x88, 0x6E, 0xCD, 
	0x7E, 0x43, 0xBF, 0x99, 0x85, 0xC4, 0xFB, 0x27, 0xB8, 0x93, 0xAC, 0x51, 0x96, 0x02, 0x7F, 0x6B, 
	0x92, 0x8B, 0xB0, 0xD0, 0xAF, 0xA0, 0xEC, 0xDD, 0xF0, 0xAE, 0xF5, 0x14, 0xBC, 0x81, 0x4A, 0xF3, 
	0x06, 0xEE, 0x87, 0x03, 0x57, 0xA2, 0x42, 0x8C, 0x5B, 0x67, 0xE8, 0x5A, 0x79, 0xBB, 0x3B, 0xB8, 
	0x90, 0x06, 0xB6, 0xD3, 0x94, 0x48, 0xC3, 0x0F, 0x8E, 0x29, 0xAB, 0x51, 0xDE, 0xA7, 0xAA, 0xEC, 
	0x63, 0x1B, 0x3C, 0xBD, 0x51, 0x1B, 0x37, 0x62, 0x2D, 0xD1, 0xA8, 0xC8, 0x0E, 0x15, 0x01, 0x0D, 
	0x08, 0xBC, 0xD5, 0xCC, 0x21, 0x19, 0x29, 0x07, 0x02, 0xEC, 0x7B, 0xDA, 0x2C, 0xA9, 0x38, 0x41, 
	0xEF, 0x7E, 0xEA, 0x0B, 0x0A, 0xD2, 0xF3, 0x4E, 0x9C, 0xAE, 0x5F, 0x25, 0x9B, 0x9C, 0x00, 0xB5, 
	0xB5, 0xD6, 0x78, 0x74, 0x87, 0x05, 0x98, 0x4E, 0x1C, 0x64, 0x07, 0x5C, 0x27, 0x72, 0xA5, 0xD4, 
	0x01, 0xA2, 0xAC, 0xBB, 0x77, 0xF5, 0x55, 0x9D, 0x52, 0x1F, 0x91, 0x24, 0x4E, 0xDF, 0x36, 0xB8, 
	0x10, 0xF4, 0x4A, 0x1B };

// Bootstrap/Integral Function (HASH_TABLE_ITERATE_BEGIN - opcode 0x25FF): Hash table iterate begin.
#define hash_table_iterate_begin_key d514351438dc04da
#define hash_table_iterate_begin_size b79bff351417e45e
#define hash_table_iterate_begin_crc a7a3a337d6a20225
#define hash_table_iterate_begin_data f6d4eeff651aa1cc
static uint64_t hash_table_iterate_begin_key = UINT64_C(0x675A86AEE3851C24);
static uint64_t hash_table_iterate_begin_size = UINT64_C(0x86);
static uint64_t hash_table_iterate_begin_crc = UINT64_C(0xFD9029EF499B0970);
static uint8_t hash_table_iterate_begin_data[] = {
	0x95, 0x18, 0xC7, 0x7E, 0xD7, 0xA9, 0xD2, 0x75, 0xF0, 0x68, 0x09, 0x26, 0x9D, 0x78, 0xA2, 0x43, 0xE5, 
	0xF4, 0xA4, 0x53, 0xA7, 0xBD, 0x89, 0x22, 0x06, 0x1B, 0x6B, 0xEE, 0xF3, 0x4A, 0x5F, 0x3B, 0x4E, 
	0x64, 0x5B, 0x60, 0xC2, 0xF6, 0xE1, 0x34, 0x43, 0x62, 0xF8, 0xDF, 0xCF, 0x21, 0x89, 0x3A, 0xD3, 
	0x47, 0x66, 0x65, 0x87, 0xAD, 0xBE, 0xB2, 0xF0, 0x51, 0x3D, 0x2D, 0xE8, 0x43, 0x6E, 0xD2, 0x9A, 
	0x57, 0x37, 0x0D, 0xBD, 0x14, 0xD4, 0x1E, 0xEF, 0x46, 0x68, 0x34, 0x8F, 0x7A, 0xE7, 0xF6, 0x50, 
	0x27, 0x41, 0x16, 0xD9, 0x13, 0xEA, 0x01, 0xC4, 0x08, 0x5F, 0x03, 0x81, 0xFB, 0x29, 0x77, 0xDE, 
	0x7A, 0x4A, 0x39, 0xFC, 0xB1, 0x6C, 0x73, 0x37, 0x2C, 0x8F, 0xC1, 0xF1, 0x46, 0x01, 0x2E, 0x28, 
	0x5F, 0x1B, 0x0A, 0x48, 0xC6, 0x5B, 0x2E, 0xE2, 0xE1, 0xF9, 0x10, 0xAC, 0x34, 0x39, 0xF5, 0xC2, 
	0x58, 0x0A, 0x15, 0xBA, 0xDA };

// Bootstrap/Integral Function (HASH_TABLE_ITERATE_END - opcode 0xCA1B): Hash table iterate end.
#define hash_table_iterate_end_key e6a96529c63f4bff
#define hash_table_iterate_end_size fca6794100469d65
#define hash_table_iterate_end_crc cd0333aa2a1aeba8
#define hash_table_iterate_end_data ad592f42f495eaf0
static uint64_t hash_table_iterate_end_key = UINT64_C(0x294329434A190964);
static uint64_t hash_table_iterate_end_size = UINT64_C(0x8C);
static uint64_t hash_table_iterate_end_crc = UINT64_C(0xC926E9199998006);
static uint8_t hash_table_iterate_end_data[] = {
	0xD7, 0x96, 0x40, 0x31, 0x12, 0xC1, 0xE8, 0x76, 0x3C, 0x70, 0xFF, 0xA2, 0xE8, 0xF8, 0xD0, 0x4E, 0x5F, 
	0xBD, 0xCF, 0x20, 0x47, 0xC1, 0x9D, 0x88, 0xC4, 0x34, 0x4F, 0xE1, 0x86, 0x1D, 0x54, 0x75, 0xED, 
	0xC9, 0xB0, 0x49, 0x00, 0x70, 0x8F, 0x58, 0x8D, 0xB3, 0x72, 0x66, 0x4C, 0x62, 0xD6, 0x4B, 0xD2, 
	0xE8, 0x62, 0x5D, 0x20, 0xD5, 0x7F, 0x31, 0x78, 0x79, 0xBC, 0x45, 0x6F, 0x52, 0x19, 0x86, 0x48, 
	0x3D, 0x8B, 0x3D, 0x25, 0xEE, 0x31, 0x93, 0x9E, 0x09, 0x57, 0x1A, 0xC3, 0x03, 0x1A, 0x2B, 0x7A, 
	0x35, 0x4A, 0x8C, 0x1F, 0xA1, 0x79, 0x43, 0x95, 0x9D, 0xDB, 0x71, 0xFF, 0x36, 0x86, 0xD6, 0x26, 
	0x19, 0xD5, 0xA6, 0x1C, 0x00, 0x6F, 0x5D, 0x8E, 0x69, 0xDD, 0xAD, 0x1C, 0x05, 0xDD, 0x94, 0x60, 
	0x6B, 0x7B, 0xF9, 0x0C, 0x6F, 0x65, 0x69, 0x8F, 0xF3, 0x9D, 0x12, 0xDC, 0x91, 0x8B, 0x94, 0x83, 
	0x10, 0x7A, 0x3C, 0xE8, 0xAC, 0xD2, 0x52, 0x03, 0x39, 0xC5, 0x4F };

// Bootstrap/Integral Function (HASH_TABLE_COUNT - opcode 0x2D8B): Hash table count.
#define hash_table_count_key a801e40d3279a0ef
#define hash_table_count_size dc2abb36f8ddea7d
#define hash_table_count_crc d75386e415d649f8
#define hash_table_count_data c5f81d5a4de1d448
static uint64_t hash_table_count_key = UINT64_C(0x37008A65F601EA6A);
static uint64_t hash_table_count_size = UINT64_C(0x8C);
static uint64_t hash_table_count_crc = UINT64_C(0x2B214CEA9CD6EEC1);
static uint8_t hash_table_count_data[] = {
	0x3F, 0xA1, 0x94, 0xF9, 0x02, 0x14, 0x44, 0x8A, 0x81, 0xF4, 0xEA, 0x63, 0xA3, 0x79, 0x6D, 0xDF, 0x18, 
	0xA3, 0x27, 0x0D, 0x49, 0x9A, 0x6E, 0x36, 0x58, 0x7D, 0xB4, 0x8F, 0xA1, 0x91, 0xAD, 0x29, 0x3F, 
	0x68, 0x4F, 0x3F, 0xFC, 0x10, 0x76, 0xF0, 0x5F, 0x46, 0xA9, 0x35, 0xDB, 0x76, 0xEF, 0x3A, 0x02, 
	0xD4, 0x7B, 0xAA, 0x30, 0xBF, 0xE5, 0x03, 0xD2, 0x16, 0x80, 0xB2, 0xDB, 0x42, 0xAA, 0x11, 0x36, 
	0x64, 0x02, 0x01, 0xF8, 0xF8, 0x16, 0xA3, 0xDB, 0xB8, 0x6E, 0x38, 0x9E, 0x3C, 0xA5, 0xC7, 0xB1, 
	0xF9, 0x10, 0x3B, 0x69, 0x4A, 0xA0, 0xDD, 0x95, 0x34, 0xBC, 0xFC, 0x5E, 0x60, 0x38, 0x45, 0xAD, 
	0xD2, 0xF9, 0x75, 0xB1, 0x9C, 0xEE, 0x95, 0x9F, 0x03, 0x74, 0xD2, 0xDD, 0x6C, 0x69, 0xF3, 0xF5, 
	0x0D, 0xD1, 0xD4, 0x10, 0x0A, 0xE0, 0x3C, 0x28, 0x5A, 0x34, 0xCE, 0xE7, 0xCA, 0x30, 0x78, 0x7F, 
	0x38, 0xD0, 0x63, 0xCE, 0x87, 0x64, 0x11, 0xF0, 0x2A, 0x61, 0x30 };

// Bootstrap/Integral Function (HASH_TABLE_BUCKETS - opcode 0xE2E8): Hash table buckets.
#define hash_table_buckets_key cff9c6a255036f2b
#define hash_table_buckets_size f10c49ff20af452f
#define hash_table_buckets_crc a731aafcf1eb35de
#define hash_table_buckets_data f9a277311dca25e0
static uint64_t hash_table_buckets_key = UINT64_C(0x5746511EC6BAC36);
static uint64_t hash_table_buckets_size = UINT64_C(0x8C);
static uint64_t hash_table_buckets_crc = UINT64_C(0x2BBCBA42A5FBE72E);
static uint8_t hash_table_buckets_data[] = {
	0xBA, 0x55, 0x0A, 0x90, 0x02, 0x3F, 0xEA, 0x91, 0x56, 0x80, 0xB0, 0x38, 0x89, 0xC9, 0xAF, 0x39, 0x57, 
	0x5D, 0x81, 0xF3, 0xD7, 0x97, 0x2E, 0x2D, 0xF4, 0x15, 0x09, 0xE4, 0xF9, 0x19, 0x4D, 0x2C, 0x61, 
	0xA4, 0x59, 0x12, 0xFB, 0x7F, 0x1B, 0xC9, 0xB8, 0xA8, 0xCE, 0xCC, 0x07, 0x0C, 0x49, 0x6E, 0x0E, 
	0xD7, 0xE6, 0x5E, 0x62, 0xF9, 0x5F, 0x94, 0x8A, 0x91, 0x5D, 0xB2, 0x18, 0x17, 0x84, 0x4F, 0xFB, 
	0xF5, 0x67, 0xF1, 0x3D, 0x1F, 0x0B, 0xE4, 0x8C, 0x54, 0xAC, 0x7D, 0x9E, 0xC2, 0x8F, 0x14, 0xC6, 
	0x9D, 0x39, 0x60, 0xD3, 0xF3, 0x13, 0x46, 0x33, 0xBA, 0x3C, 0x42, 0xB9, 0x8F, 0xFA, 0x99, 0x44, 
	0x1B, 0xD9, 0x4B, 0xF0, 0x22, 0x76, 0xE9, 0xFE, 0x68, 0x29, 0xB6, 0xF2, 0x06, 0xC2, 0xCE, 0x48, 
	0xE0, 0x1B, 0xEF, 0x13, 0x8E, 0xF0, 0xF5, 0x9D, 0xBF, 0x8A, 0x31, 0x47, 0x02, 0xA6, 0x88, 0x7A, 
	0xE5, 0x78, 0xEF, 0xDC, 0xE1, 0x18, 0x29, 0xCB, 0xA4, 0x43, 0xBF };

// Bootstrap/Integral Function (HASH_TABLE_ITERATE - opcode 0x25B5): Hash table iterate.
#define hash_table_iterate_key b7f143ea7edddf3a
#define hash_table_iterate_size b1cf0cd95c684c28
#define hash_table_iterate_crc f64291bea825ff5a
#define hash_table_iterate_data b83fdafcaaeead16
static uint64_t hash_table_iterate_key = UINT64_C(0x25FAB02EB3DDB799);
static uint64_t hash_table_iterate_size = UINT64_C(0x124);
static uint64_t hash_table_iterate_crc = UINT64_C(0xE122883245477DCE);
static uint8_t hash_table_iterate_data[] = {
	0x46, 0x05, 0xAA, 0xB5, 0xFC, 0x66, 0xEE, 0xFB, 0xA8, 0xD0, 0xA2, 0x59, 0xAF, 0x27, 0xFE, 0x6F, 0x03, 
	0xBC, 0xEC, 0x97, 0xFC, 0x2F, 0xCC, 0xD8, 0x8B, 0xC3, 0x87, 0xCD, 0x2D, 0x6F, 0xDF, 0x75, 0x2A, 
	0x8B, 0x7B, 0x1A, 0x3B, 0x3B, 0xD4, 0x8E, 0xB3, 0xC5, 0x6C, 0x24, 0x15, 0x9D, 0xE1, 0xB3, 0x13, 
	0xE8, 0xB6, 0x71, 0x02, 0x73, 0x07, 0xD1, 0x66, 0xD3, 0x7E, 0xAD, 0x8F, 0xF5, 0xB8, 0x52, 0xFE, 
	0x7D, 0x3C, 0x8A, 0x10, 0x90, 0xC6, 0xD8, 0x4A, 0x2C, 0x90, 0x8E, 0x72, 0x69, 0x6B, 0xB8, 0xA7, 
	0x51, 0xFF, 0xBA, 0x3A, 0xFF, 0xAC, 0x7B, 0x15, 0x5B, 0xF8, 0xE2, 0xF6, 0x35, 0xCD, 0xE7, 0x8A, 
	0x6A, 0xFC, 0x0B, 0x17, 0x20, 0x33, 0x0C, 0x08, 0x8E, 0x8C, 0x32, 0x00, 0xD9, 0x79, 0x2F, 0x27, 
	0xD7, 0xB0, 0x05, 0x91, 0x10, 0x44, 0x63, 0xF0, 0x0F, 0x3F, 0x8F, 0xB8, 0x5A, 0xCF, 0x94, 0xC5, 
	0x8A, 0xD4, 0xF6, 0x53, 0x09, 0xB8, 0xA5, 0x99, 0x75, 0x7D, 0xC8, 0x9E, 0x91, 0xC1, 0x65, 0x5A, 
	0x08, 0x4D, 0xA6, 0xC8, 0x38, 0x6A, 0x5E, 0xB8, 0xF1, 0x44, 0xAB, 0xFE, 0xE2, 0x54, 0x25, 0x85, 
	0x1E, 0x3D, 0x6B, 0x4D, 0x23, 0x62, 0xC6, 0x2B, 0x73, 0xDB, 0x7C, 0xB1, 0x45, 0x81, 0x3D, 0x01, 
	0xDF, 0x78, 0x73, 0x6C, 0x23, 0x78, 0xEB, 0xB2, 0x17, 0x3E, 0x1D, 0x8B, 0xFD, 0x9B, 0x9E, 0x33, 
	0xCC, 0x7C, 0xCC, 0x88, 0xDC, 0x28, 0xC5, 0x4E, 0x0C, 0xDD, 0xE2, 0xC2, 0x3D, 0x21, 0x8F, 0x1C, 
	0x6F, 0xC0, 0xD8, 0xCC, 0x9F, 0xE7, 0xE3, 0xA3, 0x27, 0xA5, 0x85, 0xDF, 0xBA, 0x93, 0x60, 0xB3, 
	0x67, 0xBF, 0x90, 0x5B, 0xDE, 0xC2, 0xA6, 0xF0, 0xC0, 0xD2, 0x27, 0x54, 0x04, 0xA5, 0xAD, 0x62, 
	0x67, 0x71, 0x5A, 0xB4, 0x02, 0xEE, 0xA6, 0x2D, 0xBB, 0xB0, 0xA4, 0x19, 0x0B, 0x74, 0x0A, 0xC9, 
	0x97, 0xCE, 0xE2, 0x1F, 0xCD, 0x1A, 0x4C, 0xB6, 0xFF, 0x4A, 0xB0, 0x0C, 0x12, 0xBB, 0xEA, 0x04, 
	0xCA, 0xAC, 0x2D, 0x6E, 0x1A, 0x12, 0xBF, 0x75, 0xF3, 0xAA, 0x3D, 0x29, 0x81, 0xA1, 0x98, 0x2B, 
	0xFD, 0x6C, 0x8B };

// Bootstrap/Integral Function (HASH_TABLE_DEFAULT_HASHER - opcode 0x2A15): Hash table default hasher.
#define hash_table_default_hasher_key bd537f4ab185a810
#define hash_table_default_hasher_size f94e983528754f2e
#define hash_table_default_hasher_crc bd47005f943a6f63
#define hash_table_default_hasher_data becc2ecc22125f44
static uint64_t hash_table_default_hasher_key = UINT64_C(0x1AE7CF0BC36C1D38);
static uint64_t hash_table_default_hasher_size = UINT64_C(0x35);
static uint64_t hash_table_default_hasher_crc = UINT64_C(0x6B474E4376074C76);
static uint8_t hash_table_default_hasher_data[] = {
	0xEA, 0x21, 0x1D, 0xBC, 0x7C, 0x4E, 0x37, 0x1B, 0x4C, 0x94, 0x7C, 0x85, 0xBB, 0xE0, 0x4C, 0x56, 0x4C, 
	0xC3, 0xA8, 0xB7, 0x32, 0xAC, 0x6B, 0xC5, 0xE6, 0x9A, 0xBB, 0x91, 0x4B, 0xFA, 0x31, 0x2B, 0x48, 
	0x29, 0x9F, 0x57, 0x98, 0x7B, 0x24, 0xB9, 0x61, 0x92, 0xA8, 0x32, 0x9A, 0xB7, 0x95, 0x84, 0xB3, 
	0xE7, 0xD2, 0x8F, 0x80 };

