; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25547.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	rdrand
PUBLIC	hrdrnd
_DATA	SEGMENT
rdrand	DB	048H
	DB	0fH
	DB	0c7H
	DB	0f0H
	DB	073H
	DB	0faH
	DB	0c3H
	ORG $+1
hrdrnd	DB	053H
	DB	0b8H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	0a2H
	DB	0fH
	DB	0baH
	DB	0e1H
	DB	01eH
	DB	073H
	DB	09H
	DB	048H
	DB	0c7H
	DB	0c0H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	05bH
	DB	0c3H
	DB	048H
	DB	02bH
	DB	0c0H
	DB	0ebH
	DB	0f2H
_DATA	ENDS
CONST	SEGMENT
?p@?1??sec_sha512_finish@@9@9 DB 080H			; `sec_sha512_finish'::`2'::p
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	main
PUBLIC	??_C@_05JMLLFKBP@?$CFllu?6?$AA@			; `string'
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp_GetCurrentProcess:PROC
EXTRN	__imp_FlushInstructionCache:PROC
EXTRN	__imp_VirtualProtect:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN7
	DD	imagerel $LN7+279
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_05JMLLFKBP@?$CFllu?6?$AA@
CONST	SEGMENT
??_C@_05JMLLFKBP@?$CFllu?6?$AA@ DB '%llu', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	025052d01H
	DD	01122317H
	DD	0700b0031H
	DD	0500aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
main$rtcName$0 DB 064H
	DB	075H
	DB	06dH
	DB	06dH
	DB	079H
	DB	00H
	ORG $+10
main$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:main$rtcName$0
	ORG $+48
main$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 025053901H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\kristen\desktop\repos\sec_mem\program.c
;	COMDAT main
_TEXT	SEGMENT
dummy$ = 4
hrr$ = 40
rdr$ = 72
i$4 = 100
n$5 = 136
argc$ = 384
argv$ = 392
main	PROC						; COMDAT

; 15   : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR [rsp+424]

; 16   : 	DWORD dummy = 0;

  0002d	c7 45 04 00 00
	00 00		 mov	 DWORD PTR dummy$[rbp], 0

; 17   : 
; 18   : 	VirtualProtect(hrdrnd, sizeof(hrdrnd), PAGE_EXECUTE_READWRITE, &dummy);

  00034	4c 8d 4d 04	 lea	 r9, QWORD PTR dummy$[rbp]
  00038	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0003e	ba 1c 00 00 00	 mov	 edx, 28
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:hrdrnd
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualProtect

; 19   : 	//FlushInstructionCache(GetCurrentProcess(), NULL, 0);
; 20   : 
; 21   : 	VirtualProtect(rdrand, sizeof(rdrand), PAGE_EXECUTE_READWRITE, &dummy);

  00050	4c 8d 4d 04	 lea	 r9, QWORD PTR dummy$[rbp]
  00054	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0005a	ba 07 00 00 00	 mov	 edx, 7
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:rdrand
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualProtect

; 22   : 	FlushInstructionCache(GetCurrentProcess(), NULL, 0);

  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcess
  00072	45 33 c0	 xor	 r8d, r8d
  00075	33 d2		 xor	 edx, edx
  00077	48 8b c8	 mov	 rcx, rax
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FlushInstructionCache

; 23   : 
; 24   : 	void* hrr = (void*)&hrdrnd[0];

  00080	b8 01 00 00 00	 mov	 eax, 1
  00085	48 6b c0 00	 imul	 rax, rax, 0
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:hrdrnd
  00090	48 03 c8	 add	 rcx, rax
  00093	48 8b c1	 mov	 rax, rcx
  00096	48 89 45 28	 mov	 QWORD PTR hrr$[rbp], rax

; 25   : 	void* rdr = (void*)&rdrand[0];

  0009a	b8 01 00 00 00	 mov	 eax, 1
  0009f	48 6b c0 00	 imul	 rax, rax, 0
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:rdrand
  000aa	48 03 c8	 add	 rcx, rax
  000ad	48 8b c1	 mov	 rax, rcx
  000b0	48 89 45 48	 mov	 QWORD PTR rdr$[rbp], rax

; 26   : 
; 27   : 	if (((bool(*)())hrr)())

  000b4	ff 55 28	 call	 QWORD PTR hrr$[rbp]
  000b7	0f b6 c0	 movzx	 eax, al
  000ba	85 c0		 test	 eax, eax
  000bc	74 39		 je	 SHORT $LN5@main

; 28   : 	{
; 29   : 		for (int i = 0; i < 512; ++i)

  000be	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  000c5	eb 08		 jmp	 SHORT $LN4@main
$LN2@main:
  000c7	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  000ca	ff c0		 inc	 eax
  000cc	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
$LN4@main:
  000cf	81 7d 64 00 02
	00 00		 cmp	 DWORD PTR i$4[rbp], 512	; 00000200H
  000d6	7d 1f		 jge	 SHORT $LN3@main

; 30   : 		{
; 31   : 			uint64_t n = ((uint64_t(*)())rdr)();

  000d8	ff 55 48	 call	 QWORD PTR rdr$[rbp]
  000db	48 89 85 88 00
	00 00		 mov	 QWORD PTR n$5[rbp], rax

; 32   : 			printf("%" PRIu64 "\n", n);

  000e2	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR n$5[rbp]
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05JMLLFKBP@?$CFllu?6?$AA@
  000f0	e8 00 00 00 00	 call	 printf

; 33   : 		}

  000f5	eb d0		 jmp	 SHORT $LN2@main
$LN3@main:
$LN5@main:

; 34   : 	}
; 35   : 
; 36   : 	//uint8_t* v = sec_random_generate_seed();
; 37   : 
; 38   : 	return 0;

  000f7	33 c0		 xor	 eax, eax

; 39   : }

  000f9	8b f8		 mov	 edi, eax
  000fb	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:main$rtcFrameData
  00106	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0010b	8b c7		 mov	 eax, edi
  0010d	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00114	5f		 pop	 rdi
  00115	5d		 pop	 rbp
  00116	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
_Format$ = 288
printf	PROC						; COMDAT

; 950  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

  00039	48 8d 85 28 01
	00 00		 lea	 rax, QWORD PTR _Format$[rbp+8]
  00040	48 89 45 28	 mov	 QWORD PTR _ArgList$[rbp], rax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00044	b9 01 00 00 00	 mov	 ecx, 1
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0004f	4c 8b 4d 28	 mov	 r9, QWORD PTR _ArgList$[rbp]
  00053	45 33 c0	 xor	 r8d, r8d
  00056	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR _Format$[rbp]
  0005d	48 8b c8	 mov	 rcx, rax
  00060	e8 00 00 00 00	 call	 _vfprintf_l
  00065	89 45 04	 mov	 DWORD PTR _Result$[rbp], eax

; 955  :     __crt_va_end(_ArgList);

  00068	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR _ArgList$[rbp], 0

; 956  :     return _Result;

  00070	8b 45 04	 mov	 eax, DWORD PTR _Result$[rbp]

; 957  : }

  00073	8b f8		 mov	 edi, eax
  00075	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:printf$rtcFrameData
  00080	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00085	8b c7		 mov	 eax, edi
  00087	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0008e	5f		 pop	 rdi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 224
_Format$ = 232
_Locale$ = 240
_ArgList$ = 248
_vfprintf_l PROC					; COMDAT

; 638  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00039	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0003e	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _ArgList$[rbp]
  00045	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0004a	4c 8b 8d f0 00
	00 00		 mov	 r9, QWORD PTR _Locale$[rbp]
  00051	4c 8b 85 e8 00
	00 00		 mov	 r8, QWORD PTR _Format$[rbp]
  00058	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR _Stream$[rbp]
  0005f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 640  : }

  00068	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 73   : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00023	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002a	5f		 pop	 rdi
  0002b	5d		 pop	 rbp
  0002c	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
